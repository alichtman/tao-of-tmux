# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Tony Narlock
# This file is distributed under the same license as the tao-of-tmux
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tao-of-tmux \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-04 19:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../manuscript/00-foreword.md:2
msgid "{frontmatter}"
msgstr ""

#: ../../manuscript/00-foreword.md:4
msgid "Foreword"
msgstr "前言"

#: ../../manuscript/00-foreword.md:6
msgid ""
"Nearly all my friends use tmux. I remember going out at night for drinks "
"and the three of us would take a seat at a round table and take out our "
"smart phones. This was back when phones still had physical \"QWERTY\" "
"keyboards."
msgstr ""

#: ../../manuscript/00-foreword.md:10
msgid ""
"Despite our home computers being asleep or turned off, our usernames in "
"the IRC channel we frequently visited persisted in the chatroom list. Our"
" screens were lit by a kaleidoscope of colors on a black background. We "
"ssh'd with ConnectBot into our cloud servers and reattached by running "
"screen(1). As it hit 2AM, our Turkish coffee arrived, the |away status "
"indicator trailing our online nicknames disappeared."
msgstr ""

#: ../../manuscript/00-foreword.md:17
msgid ""
"It was funny noticing, even though we knew each other by our real names, "
"we sometimes opted to call each other by our nicks. It's something about "
"how personal relationships, formed online, persist in real life."
msgstr ""

#: ../../manuscript/00-foreword.md:21
msgid ""
"It seemed as if it were orchestrated, but each of us fell into the same "
"ebb and flow of living our lives. No one told us to do it, but bit by "
"bit, we incrementally optimized our lifestyles, personally and "
"professionally, to arrive at destinations seeming eerily alike."
msgstr ""

#: ../../manuscript/00-foreword.md:26
msgid ""
"Like many things in life, when we act on autopilot, we sometimes arrive "
"at similar destinations. This is often unplanned."
msgstr ""

#: ../../manuscript/00-foreword.md:29
msgid ""
"So, when I write an educational book about a computer application, I hope"
" to write it for human beings. Not to sell you on tmux, convince you to "
"like it or hate it, but to tell you what it is and how some people use "
"it. I'll leave the rest to you."
msgstr ""

#: ../../manuscript/00-foreword.md:34
msgid "About this book"
msgstr ""

#: ../../manuscript/00-foreword.md:36
msgid ""
"I've helped thousands learn tmux through my free resource under the name "
"The Tao of tmux, which I kept as part of the documentation for the tmuxp "
"session manager. And now, it's been expanded into a full-blown book with "
"refined graphics, examples, and much more."
msgstr ""

#: ../../manuscript/00-foreword.md:42
msgid ""
"You do not need a book to use or understand tmux. If you want a technical"
" manual, look at the manpage for tmux. Manpages, however, are rarely "
"sufficient to wrap your brain around abstract concepts; they're there for"
" reference. This learning book is the culmination of years of explaining "
"tmux to others online and in person."
msgstr ""

#: ../../manuscript/00-foreword.md:48
msgid ""
"In this book, we will break down tmux by its objects, from servers down "
"to panes. It also includes a rehash of terminal facilities we use every "
"day to keep us autodidacts up to speed with what is what. I've included "
"numerous examples of projects, permissively licensed source code, and "
"workflows designed for efficiency in the world of the terminal."
msgstr ""

#: ../../manuscript/00-foreword.md:54
msgid ""
"tmux is a tool I find useful. While I don't attach it to my personal "
"identity, it's been part of my daily life for years. Besides the original"
" resource, I've written a popular tmux starter configuration, a pythonic "
"tmux library, and a tmux session manager."
msgstr ""

#: ../../manuscript/00-foreword.md:60
msgid ""
"I am writing this from vim running in a tmux pane, inside a window, in a "
"session running on a tmux server, through a client."
msgstr ""

#: ../../manuscript/00-foreword.md:63
msgid ""
"A word to absolute beginners: Don't feel you need to grasp the concepts "
"of the command line and terminal multiplexing in a single sitting. You "
"have the choice of picking out concepts of tmux you like, according to "
"your needs or interests. If you haven't installed tmux yet, please view "
"the Installation section in the Appendix of the book."
msgstr ""

#: ../../manuscript/00-foreword.md:69
msgid "Follow @TheTaoOfTmux for updates or share on Twitter!"
msgstr ""

#: ../../manuscript/00-foreword.md:72
msgid "Styles"
msgstr ""

#: ../../manuscript/00-foreword.md:74
msgid "Formatted text like this is source code."
msgstr ""

#: ../../manuscript/00-foreword.md:76
msgid ""
"Formatted text with a $ in front is a terminal command. $ echo 'like "
"this'. The text can be typed into the console, without the dollar "
"character. For more information on the meaning of the \"dollar prompt\", "
"check out What is the origin of the UNIX $ (dollar) prompt? on Super "
"User."
msgstr ""

#: ../../manuscript/00-foreword.md:82
msgid ""
"In tmux, shortcuts require a prefix key to be sent beforehand. For "
"instance, Prefix + d will detach a tmux client from its session. This "
"prefix, by default, is <Ctrl-b>, but users can override it. This is "
"discussed in greater detail in the prefix key section and configuration."
msgstr ""

#: ../../manuscript/00-foreword.md:87
msgid "How this book is structured"
msgstr ""

#: ../../manuscript/00-foreword.md:89
msgid ""
"First, anything involving installation and hard technical details are in "
"the Appendix. A lot of books use installation instructions as filler in "
"the early chapters. For me, it's more of not wanting to confuse "
"beginners."
msgstr ""

#: ../../manuscript/00-foreword.md:94
msgid ""
"For special circumstances, like tmux on Windows 10, I decided adding "
"screenshots is best, since many readers may be more comfortable with a "
"visual approach."
msgstr ""

#: ../../manuscript/00-foreword.md:98
msgid ""
"Thinking in tmux goes over what tmux does and how it relates to the GUI "
"desktops on our computers.  You'll understand the big picture of what "
"tmux is and how it can make your life easier."
msgstr ""

#: ../../manuscript/00-foreword.md:102
msgid ""
"Terminal Fundamentals shows the text-based environments you'll be dealing"
" with. It's great for those new to tmux, but also presents technical "
"background for developers, who learned the ropes through examples and "
"osmosis. At the end of this section, you'll be more confident and secure "
"using the essential components underpinning a modern terminal "
"environment."
msgstr ""

#: ../../manuscript/00-foreword.md:109
msgid ""
"Practical usage covers common bread-and-butter uses for you to use tmux "
"immediately."
msgstr ""

#: ../../manuscript/00-foreword.md:112
msgid ""
"Server gives life to the unseen workhorse behind the scenes powering "
"tmux. You'll think of tmux differently and may be impressed a client-"
"server architecture could be presented to end users so seamlessly."
msgstr ""

#: ../../manuscript/00-foreword.md:116
msgid ""
"Sessions are the containers holding windows. You'll learn what sessions "
"are and how they help organize your workspace in the terminal. You'll "
"learn how to manipulate and rename and traverse sessions."
msgstr ""

#: ../../manuscript/00-foreword.md:120
msgid ""
"Windows are what you see when tmux is open in front of you. You'll learn "
"how to rename and move windows."
msgstr ""

#: ../../manuscript/00-foreword.md:123
msgid ""
"Panes are a terminal in a terminal. This is where you get to work and do "
"your magic! You'll learn how to create, delete, move between, and resize "
"panes."
msgstr ""

#: ../../manuscript/00-foreword.md:127
msgid ""
"Configuration discusses customization of tmux and sets the foundation for"
" how to think about .tmux.conf so you can customize your own."
msgstr ""

#: ../../manuscript/00-foreword.md:130
msgid ""
"Status bar and styling is devoted to the customization of the status line"
" and colors in tmux. As a bonus, you'll even learn how to display system "
"information like CPU and memory usage via the status line."
msgstr ""

#: ../../manuscript/00-foreword.md:134
msgid ""
"Scripting tmux goes into command aliases and the advanced and powerful "
"Targets and Formats concepts."
msgstr ""

#: ../../manuscript/00-foreword.md:138
msgid ""
"Technical stuff is a glimpse at tmux source code and how it works under "
"the hood. You may learn enough to impress colleagues who already use "
"tmux. If you like programming on Unix-like systems, this one is for you."
msgstr ""

#: ../../manuscript/00-foreword.md:142
msgid ""
"Tips and tricks wraps up with a whirlwind of useful terminal tutorials "
"you can use with tmux to improve day to day development and "
"administration experience."
msgstr ""

#: ../../manuscript/00-foreword.md:146
msgid ""
"Cheatsheets are organized tables of commands, shortcuts, and formats "
"grouped by section."
msgstr ""

#: ../../manuscript/00-foreword.md:149
msgid "Donations"
msgstr ""

#: ../../manuscript/00-foreword.md:151
msgid ""
"If you enjoy my learning material or my open source software projects, "
"please consider donating. Donations go directly to me and my current and "
"future open source projects and are not squandered. Visit http://www.git-"
"pull.com/support.html for ways to contribute."
msgstr ""

#: ../../manuscript/00-foreword.md:156
msgid "Formats"
msgstr ""

#: ../../manuscript/00-foreword.md:158
msgid "This book is available for sale on Leanpub and Amazon Kindle."
msgstr ""

#: ../../manuscript/00-foreword.md:160
msgid "It's also available to read for free on the web."
msgstr ""

#: ../../manuscript/00-foreword.md:162
msgid "Errata {#errata}"
msgstr ""

#: ../../manuscript/00-foreword.md:164
msgid "This is my first book. I am human and make mistakes."
msgstr ""

#: ../../manuscript/00-foreword.md:166
msgid ""
"If you find errors in this book, please submit them to me at tao.of.tmux "
"<AT> nospam git-pull.com."
msgstr ""

#: ../../manuscript/00-foreword.md:169
msgid ""
"You can also submit a pull request via https://github.com/git-pull/tao-"
"of-tmux."
msgstr ""

#: ../../manuscript/00-foreword.md:171
msgid ""
"I will update digital versions of the book with the changes where "
"applicable."
msgstr ""

#: ../../manuscript/00-foreword.md:173
msgid "Thanks"
msgstr ""

#: ../../manuscript/00-foreword.md:175
msgid ""
"Thanks to the contributors for spotting errors in this book and "
"submitting errata through GitHub. In addition, readers like Graziano "
"Misuraca, who looked through the book closely, providing valuable "
"feedback."
msgstr ""

#: ../../manuscript/00-foreword.md:180
msgid ""
"Some copy, particularly in cheatsheets, comes straight out of the manual "
"of tmux, which is ISC-licensed."
msgstr ""

#: ../../manuscript/00-foreword.md:183
msgid "Book Updates and tmux changes"
msgstr ""

#: ../../manuscript/00-foreword.md:185
msgid "This book was written for tmux 2.3, released September 2016."
msgstr ""

#: ../../manuscript/00-foreword.md:187
msgid ""
"As of January 2017, it's trivial to push out minor changes to Leanpub. "
"Kindle is harder."
msgstr ""

#: ../../manuscript/00-foreword.md:190
msgid ""
"tmux does intermittently receive updates. I've accommodated many over the"
" past 5 years on my personal configurations and software libraries set "
"with continuous integration tests against multiple tmux versions. "
"Sometimes, publishers overplay version numbers to make it seem as if it's"
" worth striking a new edition of a book over it. It's effective for them,"
" but I'd rather be honest to my readership."
msgstr ""

#: ../../manuscript/00-foreword.md:196
msgid ""
"If you're considering keeping up to date with new features and "
"adjustments to tmux, the CHANGES file in the project source serves as a "
"way to see what's updated between official releases."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:2
msgid "{mainmatter}"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:4
msgid "Thinking in tmux {#thinking-tmux}"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:6
msgid "In the world of modern computing, user interaction has 2 realms:"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:8
msgid "The text realm"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:9
msgid "The graphical realm"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:11
msgid ""
"tmux lives in the graphical realm in which fixed-width fonts appear in a "
"rectangular grid in a window, like in a terminal from the 1980s."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:16
msgid "Window manager for the terminal"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:18
msgid ""
"tmux is to the console what a desktop is to GUI apps. It's a world inside"
" the text dimension. Inside tmux, you can:"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:21
msgid "multitask inside the terminal, run multiple applications"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:22
msgid "have multiple command lines (pane) in the same window"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:23
msgid "have multiple windows (window) in the workspace (session)"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:24
msgid "switch between multiple workspaces, like virtual desktops"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:83
msgid "Just like in a graphical desktop environment, they throw in a clock, too."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:85 ../../manuscript/06-window.md:106
#: ../../manuscript/06-window.md:109 ../../manuscript/06-window.md:112
#: ../../manuscript/06-window.md:115 ../../manuscript/06-window.md:118
msgid "{width=75%}"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:88
msgid "Multitasking"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:90
msgid ""
"tmux allows you to keep multiple terminals running on the same screen. "
"After all, the abbreviation \"tmux\" comes from - Terminal Multiplexer."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:93
msgid ""
"In addition to multiple terminals on one screen, tmux allows you to "
"create and link multiple \"windows\" within the confines of the tmux "
"session you attached."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:96
msgid ""
"Even better, you can copy and paste and scroll. No requirement for "
"graphics either, so you have full power, even if you're SSH'ing or on a "
"system without a display server such as X."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:100
msgid "Here are a few common scenarios:"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:102
msgid ""
"Running $ tail -F /var/log/apache2/error.log in a pane to get a live "
"stream of the latest system events."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:104
msgid ""
"Running a file watcher, like watchman, gulp-watch, grunt-watch, guard, or"
" entr. On file change, you could do stuff like:"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:108
msgid "rebuild LESS or SASS files, minimize CSS and/or assets and static files"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:109
msgid "lint with linters, like cpplint, Cppcheck, rubocop, ESLint, or Flake8"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:112
msgid "rebuild with make or ninja"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:113
msgid "reload your Express server"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:114
msgid "run any other custom command of your liking"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:115
msgid ""
"Keeping a text editor, like vim, emacs, pico, nano, etc., open in a main "
"pane, while leaving two others open for CLI commands and building via "
"make or ninja."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:121
msgid "With tmux, you quickly have the makings of an IDE! And on your terms."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:123
msgid "Keep your applications running in the background"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:125
msgid ""
"Sometimes, GUI applications will have an option to be sidelined to the "
"system tray to run in the background.  The application is out of sight, "
"but events and notifications can still come in, and the app can be "
"instantly brought to the foreground."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:130
msgid "In tmux, a similar concept exists, where we can \"detach\" a tmux session."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:132
msgid "Detaching can be especially useful on:"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:134
msgid ""
"Local machines. You start all your normal terminal applications within a "
"tmux session, you restart X. Instead of losing your processes as you "
"normally would if you were using an X terminal, like xterm or konsole, "
"you'd be able to tmux attach after and find all the processes inside that"
" were alive and kicking all along."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:139
msgid ""
"Remote SSH applications and workspaces you run in tmux. You can detach "
"your tmux workspace at work before you clock out, then the next morning, "
"reattach your session. Ahhh. Refreshing. :)"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:142
msgid ""
"Those servers you rarely log into. Perhaps, a cloud instance you log into"
" 9 months later, and as a reflex, tmux attach to see if there is anything"
" on there. And boom, you're back in a session you've forgotten about, but"
" still jogs your memory to what you were tweaking or fixing. It's like a "
"hack to restore your memory."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:148
msgid "Powerful combos"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:150
msgid ""
"Chatting on irssi or weechat, one of the \"classic combos\", along with a"
" bitlbee server to manage AIM, MSN, Google Talk, Jabber, ICQ, even "
"Twitter. Then, you can detach your IRC and \"idle\" in your favorite "
"channels, stay online on instant messengers, and get back to your "
"messages when you return."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:158
msgid ""
"Some keep development services running in a session. Hearty emphasis on "
"development, you probably will want to daemonize and wrap your production"
" web applications, using a tool like supervisor, with its own safe "
"environmental settings."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:163
msgid ""
"You can also have multiple users attach their clients to the same "
"sessions, which is great for pair programming.  If you were in the same "
"session, you and the other person would see the same thing, share the "
"same input, and the same active window and pane."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:168
msgid ""
"The above are just examples; any general workspace you'd normally use in "
"a terminal could work, especially projects or repetitive efforts you "
"multitask on. The tips and tricks section will dive into specific flows "
"you can use today."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:173
msgid ""
"Q> ### Do tmux sessions persist after a system restart? Q> Q> "
"Unfortunately, no. A restart will kill the tmux server and any processes "
"Q> running within it. Q> Q> Thankfully, the modern server can stay online"
" for a long time. Even for Q> consumer laptops and PC's with a day or two"
" uptime, having tmux persist Q> tasks for organizational purposes is "
"satisfactory to run it. Q> Q> It comes as a disappointment, because some "
"are interested in being able to Q> persist a tree of processes after "
"restart. It goes out of the scope of what Q> tmux is meant to do. Q> Q> "
"For tasks you repeat often, you can always use a tool, like Q> tmuxp, "
"tmuxinator, Q> or teamocil, to resume common Q> sessions. Q> Q> Besides "
"session managers, tmux-resurrect Q> attempts to preserve running "
"programs, working directories, and Q> so on within tmux. The benefit with"
" tmux-resurrect is there's no JSON/YAML Q> config needed."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:196
#: ../../manuscript/02-terminal-fundamentals.md:167
#: ../../manuscript/03-practical-usage.md:120 ../../manuscript/04-server.md:144
#: ../../manuscript/05-session.md:138 ../../manuscript/06-window.md:179
#: ../../manuscript/07-pane.md:180 ../../manuscript/09-status-bar.md:341
#: ../../manuscript/10-scripting.md:470
msgid "Summary"
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:198
msgid ""
"tmux is a versatile addition to your terminal toolbelt. It helps you "
"cover the gaps between multitasking and workspace organization you'd "
"otherwise lose, since there's no GUI. In addition, it includes a nice "
"ability to detach workspaces to the background and reattach later."
msgstr ""

#: ../../manuscript/01-thinking-tmux.md:203
msgid ""
"In the next chapter, we will touch on some terminal basics before diving "
"deeper into tmux."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:1
msgid "Terminal fundamentals {#terminal-fundamentals}"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:3
msgid ""
"Before getting into tmux, a few fundamentals of the command line should "
"be reviewed. Often, we're so used to using these out of street smarts and"
" muscle memory, a great deal of us never see the relation of where these "
"tools stand next to each other."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:8
msgid ""
"Seasoned developers are familiar with Zsh, Bash, iTerm2, konsole, "
"/dev/tty, shell scripting, and so on. If you use tmux, you'll be around "
"these all the time, regardless whether you're in a GUI on a local machine"
" or SSH'ing into a remote server."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:13
msgid ""
"If you want to learn more about how processes and TTYs work at the kernel"
" level (data structures and all), the book The Design and Implementation "
"of the FreeBSD Operating System (2nd Edition) by Marshall Kirk McKusick "
"is nice, particularly, Chapter 4, Process Management and Section 8.6, "
"Terminal Handling. The TTY demystified by Linus Åkesson (available "
"online) dives into the TTY and is a good read."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:20
msgid ""
"Much more exists to glean off the history of Unix, 4.2 BSD, etc. I "
"probably could have a coffee / tea with you discussing it for hours. You "
"could look at it from multiple perspectives (The C Language, anything "
"from the Unix/BSD lineage, etc.), and some clever fellow would likely "
"chime in, mentioning Linux, GNU, and so on. It's like Game of Thrones; "
"there's multiple story arcs you can follow, some of which intersect. A "
"few good video resources would be A Narrative History of BSD by Marshall "
"Kirk McKusick, The UNIX Operating System by AT&T, Early days of Unix and "
"design of sh by Stephen R. Bourne."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:30
msgid "POSIX standards"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:32
msgid ""
"Operating systems like macOS (formerly OS X), Linux, and the BSDs, follow"
" something similar to the POSIX specification in terms of how they square"
" away various responsibilities and interfaces of the operating system. "
"They're categorized as \"Mostly POSIX-compliant\"."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:37
msgid ""
"In daily life, we often break compatibility with POSIX standards for "
"reasons of sheer practicality. Operating systems, like macOS, will drop "
"you right into Bash. make(1), a POSIX standard, is GNU Make on macOS by "
"default. Did you know, as of September 2016, POSIX Make has no "
"conditionals?"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:43
msgid ""
"I'm not saying this to take a run at purists. As someone who tries to "
"remain compatible in my scripting, it gets hard to do simple things after"
" a while. On FreeBSD, the default Make (PMake) uses dots between "
"conditionals:"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:48
msgid "{line-numbers=off} .IF"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:53
msgid ""
"But on most Linux systems and macOS, GNU Make is the default, so they get"
" to do:"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:55
msgid "{line-numbers=off} IF"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:60
msgid ""
"This is one of the many tiny inconsistencies that span operating systems,"
" their userlands, their binary / library /  include paths, and adherence "
"/ interpretation of the Filesystem Hierarchy Standard or whether they "
"follow their own."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:65
msgid ""
"I> Find your path I> I> Most operating systems inspired by Unix (BSD's, "
"macOS, Linux) will allow you I> to get the info of your systems' "
"filesystem hierarchy via hier(7). I> I> {language=shell, line-"
"numbers=off} I>     $ man hier"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:73
msgid ""
"These differences add up. A good deal of software infrastructure out "
"there exists solely to abstract the differences across them. For example:"
" CMake, Autotools, SFML, SDL2, interpreted programming languages, and "
"their standard libraries are dedicated to normalizing the banal "
"differences across BSD-derivatives and Linux distributions. Many, many "
"#ifdef preprocessor directives in your C and C++ applications. You want "
"open source, you get choice, but be aware; there's a lot of upkeep cost "
"in keeping these upstream projects (and even your personal ones) "
"compatible. But I digress, back to terminal stuff."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:82
msgid ""
"Why does it matter? Why bring it up? You'll see this stuff everywhere. "
"So, let's separate the usual suspects into their respective categories."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:85
msgid "Terminal interface"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:87
msgid ""
"The terminal interface can be best introduced by citing official "
"specification, laying out its technical properties, interfaces, and "
"responsibilities. This can be viewed in its POSIX specification."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:91
msgid ""
"This includes TTYs, including text terminals and X sessions within them. "
"On Linux / BSD systems, you can switch between sessions via <ctrl-alt-F1>"
" through <ctrl-alt-F12>."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:95
msgid "Terminal emulators"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:97
msgid ""
"GUI Terminals: Terminal.app, iterm, iterm2, konsole, lxterm, "
"xfce4-terminal, rxvt-unicode, xterm, roxterm, gnome terminal, cmd.exe + "
"bash.exe"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:100
msgid "Shell languages {#shell-languages}"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:102
msgid ""
"Shell languages are programming languages. You may not compile the code "
"into binaries with gcc or clang, or have shiny npm package manager for "
"them, but a language is a language."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:107
msgid ""
"Each shell interpreter has its own language features. Like with shells, "
"many will resemble the POSIX shell language and strive to be compatible "
"with it. Zsh and Bash should be able to understand POSIX shell scripts "
"you write, but not the other way around (we will cover this in shell "
"interpreters)."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:113
msgid ""
"The first line of shell file is the shebang statement, which points to "
"the interpreter to run the script in. They normally use the .sh "
"extension, but they can also be .zsh, .csh and so on if they're for a "
"specific interpreter."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:118
msgid ""
"Zsh scripts are implemented by the Zsh shell interpreter, Bash scripts by"
" Bash. But the languages are not as closely regulated and standardized "
"as, say, C++'s standards committee workgroups or python's PEPs. Bash and "
"Zsh take features from Korn and C Shell's languages, but without all the "
"ceremony and bureaucracy other languages espouse."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:125
msgid "Shell interpreters (Shells) {#shells}"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:127
msgid "Examples: POSIX sh, Bash, Zsh, csh, tcsh, ksh, fish"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:129
msgid ""
"Shell interpreters implement the shell language. They are a layer on top "
"of the kernel and are what allow you, interactively, to run commands and "
"applications inside them."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:133
msgid ""
"As of October 2016, the latest POSIX specification covers in technical "
"detail the responsibilities of the shell."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:136
msgid ""
"For shells and operating systems: each distro or group does their own "
"darn thing. On most Linux distributions and macOS, you'll typically be "
"dropped into Bash."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:140
msgid ""
"On FreeBSD, you may default to a plain vanilla sh unless you specify "
"otherwise during the installation process. In Ubuntu, /bin/sh used to be "
"bash (Bourne Again Shell) but was replaced with dash (Debian Almquist "
"Shell). So, here, you are thinking \"hmm, /bin/sh, probably just a plain "
"old POSIX shell\"; however, system startup scripts on Ubuntu used to "
"allow non-POSIX scripting via Bash. This is because specialty shell "
"languages, such as Bash and Zsh, add helpful and practical features, but "
"they're not portable. For instance, you would need to install the Zsh "
"interpreter across all your systems if you rely on Zsh-specialized "
"scripting. If you conformed with POSIX shell scripting, your scripting "
"would have the highest level of compatibility at the cost of being more "
"verbose."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:154
msgid ""
"Recent versions of macOS include Zsh by default. Linux distributions "
"typically require you to install it via package manager and install it to"
" /usr/bin/zsh. BSD systems build it via the port system, pkg(8) on "
"FreeBSD, or pkg_add(1) on OpenBSD, and it will install to "
"/usr/local/bin/zsh."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:160
msgid ""
"It's fun to experiment with different shells. On many systems, you can "
"use chsh -s to update the default shell for a user."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:164
msgid ""
"The other thing to mention is, for chsh -s to work, you typically need to"
" have it added to /etc/shells."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:169
msgid ""
"To wrap it up, you will hear people talking about shells all the time. "
"Context is key. It could be:"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:172
msgid ""
"A generic way to refer to any terminal you have open. \"Type $ top into "
"your shell and see what happens.\" (Press q to quit.)"
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:174
msgid ""
"A server they have to log into. Before the era of the cloud, it would be "
"popular for small hosts to sell \"C Shells\" with root access."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:176
msgid "A shell within a tmux pane."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:177
msgid ""
"If scripting is mentioned, it is likely either the script file, an issue "
"related to the scripts' behavior, or something about the shell language."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:180
msgid ""
"But overall, after this overview, go back to doing what you're doing. If "
"shell is what people say and they understand it, use it. The backing you "
"have here should make you more confident in yourself. These days, it's an"
" ongoing battle catching our street smarts up with book smarts."
msgstr ""

#: ../../manuscript/02-terminal-fundamentals.md:185
msgid ""
"In the next chapter, we will touch some terminal basics before diving "
"deeper into tmux."
msgstr ""

#: ../../manuscript/03-practical-usage.md:1
msgid "Practical usage {#practical-usage}"
msgstr ""

#: ../../manuscript/03-practical-usage.md:3
msgid "This is the easiest part; open your terminal and type tmux, hit enter."
msgstr ""

#: ../../manuscript/03-practical-usage.md:5 ../../manuscript/05-session.md:20
msgid "{language=shell, line-numbers=off} $ tmux"
msgstr ""

#: ../../manuscript/03-practical-usage.md:8
msgid "You're in tmux."
msgstr ""

#: ../../manuscript/03-practical-usage.md:10
msgid "The prefix key {#prefix-key}"
msgstr ""

#: ../../manuscript/03-practical-usage.md:12
msgid ""
"The prefix is how we send commands into tmux. With this, we can split "
"windows, move windows, switch windows, switch sessions, send in custom "
"commands, you name it."
msgstr ""

#: ../../manuscript/03-practical-usage.md:16
msgid "And it's a hump we have to get over."
msgstr ""

#: ../../manuscript/03-practical-usage.md:18
msgid ""
"It's kind of like Street Fighter. In this video game, the player inputs a"
" combination of buttons in sequence to perform flying spinning kicks and "
"shoot fireballs; sweet. As the player grows more accustomed with the "
"combos, they repeat moves by intuition, since they develop muscle memory."
msgstr ""

#: ../../manuscript/03-practical-usage.md:24
msgid ""
"Without understanding how to send command sequences to tmux via the "
"prefix key, you'll be dead in the water."
msgstr ""

#: ../../manuscript/03-practical-usage.md:27
msgid ""
"Key sequences will come up later if you use Vim, Emacs, or other TUI "
"(Terminal User Interface) applications. If you haven't internalized the "
"concept, let's do it now. Prior experience command sequences in TUI/GUI "
"applications will come in handy."
msgstr ""

#: ../../manuscript/03-practical-usage.md:32
msgid ""
"When you memorize a key combo, it's one less time you'll be moving your "
"hand away from the keyboard to grab your mouse. You can focus your short-"
"term memory on getting stuff done, resulting in fewer mistakes."
msgstr ""

#: ../../manuscript/03-practical-usage.md:36
msgid ""
"Q> ### Coming from GNU Screen? Q> Q> Your tmux prefix key can be set via "
"your tmux configuration later!  In Q> your ~/.tmux.conf file, set the "
"prefix option: Q> Q> {language=shell, line-numbers=off} Q>     set-option"
" -g prefix C-a Q> Q> This will set the prefix key to screen(1)'s (another"
" terminal Q> multiplexer's) prefix key."
msgstr ""

#: ../../manuscript/03-practical-usage.md:47
msgid ""
"The default leader prefix is <Ctrl-b>. While holding down the control "
"key, press b."
msgstr ""

#: ../../manuscript/03-practical-usage.md:50
msgid ""
"X> ### Sending tmux commands X> X> Practice: X> X> 1. Press control key "
"down and hold it. X> 2. Press b and hold it. X> 3. Release both keys at "
"the same time. X> X> Try it a few times. It may feel unnatural until "
"you've done it a couple X> times, which is normal when memorizing "
"shortcuts. X> X> Now, let's try something: X> X> <Ctrl-b> d. So, X> X> 1."
" Press control key down and hold it. X> 2. Press b and hold it. X> 3. "
"Release both keys at the same time. X> 4. Hit d! X> X> You've sent tmux "
"your first command, and you're now outside of tmux!"
msgstr ""

#: ../../manuscript/03-practical-usage.md:72
msgid ""
"You've detached the tmux session you were in. You can reattach via $ tmux"
" attach."
msgstr ""

#: ../../manuscript/03-practical-usage.md:75
msgid "Nested tmux sessions"
msgstr ""

#: ../../manuscript/03-practical-usage.md:77
msgid ""
"You can also send the prefix key to nested tmux sessions. For instance, "
"if you're inside a tmux client on a local machine and you SSH into a "
"remote machine in one of your panes, on the remote machine, you can "
"attach the client via tmux attach as you normally would. To send the "
"prefix key to the machine's tmux client, not your local one, hit the "
"prefix key again."
msgstr ""

#: ../../manuscript/03-practical-usage.md:83
msgid ""
"So, if your prefix key is the default, <Ctrl-b>, do <Ctrl-b> + b again, "
"then hit the shortcut for what you want to do."
msgstr ""

#: ../../manuscript/03-practical-usage.md:86
msgid ""
"Example: If you wanted to create a window on the remote machine, which "
"would normally be <Ctrl-b> + c locally, it'd be <Ctrl-b> + b + c."
msgstr ""

#: ../../manuscript/03-practical-usage.md:89
msgid ""
"Hereinafter, the book will refer to shortcuts by Prefix. Instead of "
"<Ctrl-b> + d, you will see Prefix + d."
msgstr ""

#: ../../manuscript/03-practical-usage.md:92
msgid "Session persistence and the server model"
msgstr ""

#: ../../manuscript/03-practical-usage.md:94
msgid ""
"If you use Linux or a similar system, you've likely brushed through Job "
"Control, such as fg(1), jobs(1). tmux behavior feels similar, like you "
"ran <Ctrl-z> except, technically, you were in a \"job\" all along. You "
"were just using a client to view it."
msgstr ""

#: ../../manuscript/03-practical-usage.md:99
msgid ""
"Another way of understanding it: <Ctrl-b> + d closed the client "
"connection, therefore, 'detached' from the session."
msgstr ""

#: ../../manuscript/03-practical-usage.md:102
msgid ""
"Your tmux client disconnected from the server instance. The session, "
"however, is still running in the background."
msgstr ""

#: ../../manuscript/03-practical-usage.md:105
msgid "It's all commands"
msgstr ""

#: ../../manuscript/03-practical-usage.md:107
msgid ""
"Multiple roads can lead you to the same behavior. Commands are what tmux "
"uses to define instructions for setting options, resizing, renaming, "
"traversing, switching modes, copying and pasting, and so forth."
msgstr ""

#: ../../manuscript/03-practical-usage.md:111
msgid "Configs are the same as automatically running commands via $ tmux command."
msgstr ""

#: ../../manuscript/03-practical-usage.md:113
msgid "Internal tmux commands via Prefix + : prompt."
msgstr ""

#: ../../manuscript/03-practical-usage.md:114
msgid ""
"Settings defined in your configuration can also set shortcuts, which can "
"execute commands via keybindings via bind-key."
msgstr ""

#: ../../manuscript/03-practical-usage.md:116
msgid "Commands called from CLI via $ tmux cmd"
msgstr ""

#: ../../manuscript/03-practical-usage.md:117
msgid "To pull it all together, source code files are prefixed cmd-."
msgstr ""

#: ../../manuscript/03-practical-usage.md:122
msgid ""
"We've established tmux automatically creates a server upon starting it. "
"The server allows you to detach and later reattach your work. The "
"keyboard sequences you send to tmux require understanding how to send the"
" prefix key."
msgstr ""

#: ../../manuscript/03-practical-usage.md:126
msgid ""
"Keyboard sequences, configuration, and command line actions all boil down"
" to the same core commands inside tmux.  In our next chapter, we will "
"cover the server."
msgstr ""

#: ../../manuscript/04-server.md:1
msgid "Server {#server}"
msgstr ""

#: ../../manuscript/04-server.md:3
msgid "The server holds sessions and the windows and panes within them."
msgstr ""

#: ../../manuscript/04-server.md:6
msgid ""
"When tmux starts, you are connected to a server via a socket connection. "
"What you see presented in your shell is merely a client connection. In "
"this chapter, we uncover the invisible engine enabling your terminal "
"applications to persist for months or even years at a time."
msgstr ""

#: ../../manuscript/04-server.md:11
msgid "{width=90%}"
msgstr ""

#: ../../manuscript/04-server.md:14
msgid "What? tmux is a server?"
msgstr ""

#: ../../manuscript/04-server.md:16
msgid ""
"Often, when \"server\" is mentioned, what comes to mind for many may be "
"rackmounted hardware; to others, it may be software running daemonized on"
" a server and managed through a utility, like upstart, supervisor, and so"
" on."
msgstr ""

#: ../../manuscript/04-server.md:21
msgid ""
"Unlike web or database software, tmux doesn't require specialized "
"configuration settings or creating a service entry to start things."
msgstr ""

#: ../../manuscript/04-server.md:24
msgid ""
"tmux uses a client-server model, but the server is forked to the "
"background for you."
msgstr ""

#: ../../manuscript/04-server.md:27
msgid "Zero config needed"
msgstr ""

#: ../../manuscript/04-server.md:29
msgid ""
"You don't notice it, but when you use tmux normally, a server is launched"
" and being connected via a client."
msgstr ""

#: ../../manuscript/04-server.md:32
msgid ""
"tmux is so streamlined, the book could continue to explain usage and not "
"even mention servers. But, I'd rather you have a true understanding of "
"how it works on systems. The implementation feels like magic, while "
"living up to the unix expectations of utilitarianism. One cannot deny "
"it's exquisitely executed from a user experience standpoint."
msgstr ""

#: ../../manuscript/04-server.md:38
msgid ""
"How is it utilitarian? We'll go into it more in future chapters, where we"
" dive into Formats, Targets, and tools, such as libtmux I made, which "
"utilize these features."
msgstr ""

#: ../../manuscript/04-server.md:42
msgid ""
"It surprises some, because servers often beget a setup process. But "
"servers being involved doesn't entail hours of configuration on each "
"machine you run on. There's no setup."
msgstr ""

#: ../../manuscript/04-server.md:46
msgid ""
"When people think server, they think pain. It invokes an image of digging"
" around /etc/ for configuration files and flipping settings on and off "
"just to get basic systems online. But not with tmux. It's a server, but "
"in the good way."
msgstr ""

#: ../../manuscript/04-server.md:50
msgid "Stayin' alive"
msgstr ""

#: ../../manuscript/04-server.md:52
msgid ""
"The server part of tmux is how your sessions can stay alive, even after "
"your client is detached."
msgstr ""

#: ../../manuscript/04-server.md:55
msgid ""
"You can detach a tmux session from an SSH server and reconnect later. You"
" can detach a tmux session, stop your X server in Linux/BSD, and reattach"
" your tmux session in a TTY or new X server."
msgstr ""

#: ../../manuscript/04-server.md:59
msgid "The tmux server won't go away until all sessions are closed."
msgstr ""

#: ../../manuscript/04-server.md:61
msgid "Servers hold sessions"
msgstr ""

#: ../../manuscript/04-server.md:63
msgid "One server can contain one or multiple sessions."
msgstr ""

#: ../../manuscript/04-server.md:65
msgid ""
"Starting tmux after a server already is running will create a new session"
" inside the existing server."
msgstr ""

#: ../../manuscript/04-server.md:68
msgid ""
"W> ### Advanced: Multiple servers W> W> tmux is nimble. To use a separate"
" server, pass in the -L flag to any W> command. W> W> tmux -L moo - "
"connect to server under socket name \"moo\" and attach W> a new session. "
"Create server if none already exists for socket. W> W> tmux -L moo attach"
" will attempt to re-attach a session if one exists."
msgstr ""

#: ../../manuscript/04-server.md:78
msgid "How servers are \"named\""
msgstr ""

#: ../../manuscript/04-server.md:80
msgid ""
"The default name for the server is default, which is stored as a socket "
"in /tmp. The default directory for storing this can be overridden via "
"setting the TMUX_TMPDIR environment variable."
msgstr ""

#: ../../manuscript/04-server.md:84
msgid "So, something like:"
msgstr ""

#: ../../manuscript/04-server.md:86
msgid "{language=shell, line-numbers=off} $ export TMUX_TMPDIR=$HOME $ tmux"
msgstr ""

#: ../../manuscript/04-server.md:90
msgid ""
"Will give you a tmux directory created within your $HOME folder. On OS X,"
" your home folder will probably be something like /Users/yourusername. On"
" other systems, it may be /home/yourusername. If you want to find out, "
"type $ echo $HOME."
msgstr ""

#: ../../manuscript/04-server.md:95 ../../manuscript/99-cheatsheets.md:220
msgid "Clients"
msgstr ""

#: ../../manuscript/04-server.md:97
msgid "Servers will have clients (you) connecting to them."
msgstr ""

#: ../../manuscript/04-server.md:99
msgid ""
"When you connect to a session and see windows and panes, it's a client "
"connection into tmux."
msgstr ""

#: ../../manuscript/04-server.md:102
msgid "You can retrieve a list of active client connections via:"
msgstr ""

#: ../../manuscript/04-server.md:104
msgid "{language=shell, line-numbers=off} $ tmux list-clients"
msgstr ""

#: ../../manuscript/04-server.md:107
msgid ""
"These commands and the other list- commands, in practice, are rare. But, "
"they are part of tmux scriptability should you want to get creative. The "
"scripting tmux chapter will cover this in greater detail."
msgstr ""

#: ../../manuscript/04-server.md:111
msgid "Clipboard {#clipboard}"
msgstr ""

#: ../../manuscript/04-server.md:113
msgid ""
"tmux clients wield a powerful clipboard feature to copy and paste across "
"sessions, windows, and panes."
msgstr ""

#: ../../manuscript/04-server.md:116
msgid ""
"Much like vi, tmux handles copying as a mode in which a pane is "
"temporarily placed. When inside this mode, text can be selected and "
"copied to the paste buffer, tmux's clipboard."
msgstr ""

#: ../../manuscript/04-server.md:120
msgid "The default key to enter copy mode is Prefix + [."
msgstr ""

#: ../../manuscript/04-server.md:122
msgid "From within, use [space] to enter copy mode."
msgstr ""

#: ../../manuscript/04-server.md:123
msgid "Use the arrow keys to adjust the text to be selected."
msgstr ""

#: ../../manuscript/04-server.md:124
msgid "Press [enter] to copy the selected text."
msgstr ""

#: ../../manuscript/04-server.md:126
msgid "The default key to paste the text copied is Prefix + ]."
msgstr ""

#: ../../manuscript/04-server.md:128
msgid ""
"I> Vi-like copy-paste I> I> In your config, put this: I> I> "
"{language=shell, line-numbers=off} I>     # Vi copypaste mode I>     set-"
"window-option -g mode-keys vi I>     bind-key -t vi-copy 'v' begin-"
"selection I>     bind-key -t vi-copy 'y' copy-selection"
msgstr ""

#: ../../manuscript/04-server.md:138
msgid ""
"In addition to the \"copy mode\", tmux has advanced functionality to "
"programmatically copy and paste. Later in the book, the Capturing pane "
"content section in the Scripting tmux chapter goes into $ tmux capture-"
"pane and how you can use targets to copy pane content into your paste "
"buffer or files with $ tmux save-buffer."
msgstr ""

#: ../../manuscript/04-server.md:146
msgid ""
"The server is one of the fundamental underpinnings of tmux. Initialized "
"automatically to the user, it persists by forking into the background. "
"Running behind the scenes, it ensures sessions, windows, panes, and "
"buffers are operating, even when the client is detached."
msgstr ""

#: ../../manuscript/04-server.md:151
msgid ""
"The server can hold one or more sessions. You can copy and paste between "
"sessions via the clipboard. In the next chapter, we will go deeper into "
"the role sessions play and how they help you organize and control your "
"terminal workspace."
msgstr ""

#: ../../manuscript/05-session.md:1
msgid "Sessions {#sessions}"
msgstr ""

#: ../../manuscript/05-session.md:3
msgid ""
"Welcome to the session, the highest-level entity residing in the server "
"instance. Server instances are forked to the background upon starting a "
"fresh instance and reconnected to when reattaching sessions. Your "
"interaction with tmux will have at least one session running."
msgstr ""

#: ../../manuscript/05-session.md:8
msgid "A session holds one or more windows."
msgstr ""

#: ../../manuscript/05-session.md:12
msgid "The active window will have a * symbol next to it."
msgstr ""

#: ../../manuscript/05-session.md:16
msgid "Creating a session"
msgstr ""

#: ../../manuscript/05-session.md:18
msgid "The simplest command to create a new session is typing tmux:"
msgstr ""

#: ../../manuscript/05-session.md:23
msgid ""
"The $ tmux application, with no commands is equivalent to $ tmux new-"
"session. Nifty!"
msgstr ""

#: ../../manuscript/05-session.md:26
msgid ""
"By default, your session name will be given a number, which isn't too "
"descriptive. What would be better is:"
msgstr ""

#: ../../manuscript/05-session.md:29
msgid "{language=shell, line-numbers=off} $ tmux new-session -s'my rails project'"
msgstr ""

#: ../../manuscript/05-session.md:32
msgid "Switching sessions within tmux"
msgstr ""

#: ../../manuscript/05-session.md:34
msgid ""
"Some acquire the habit of detaching their tmux client and reattaching via"
" tmux att -t session_name. Thankfully, you can switch sessions from "
"within tmux!"
msgstr ""

#: ../../manuscript/05-session.md:73
msgid ""
"Prefix + s will allow you to switch between sessions within the same tmux"
" client."
msgstr ""

#: ../../manuscript/05-session.md:76
msgid ""
"This command name can be confusing. switch-client will allow you to "
"traverse between sessions in the server."
msgstr ""

#: ../../manuscript/05-session.md:79 ../../manuscript/07-pane.md:38
msgid "Example usage:"
msgstr ""

#: ../../manuscript/05-session.md:81
msgid "{language=shell, line-numbers=off} $ tmux switch-client -t dev"
msgstr ""

#: ../../manuscript/05-session.md:84
msgid ""
"If already inside a client, this will switch to a session, named \"dev\","
" if it exists."
msgstr ""

#: ../../manuscript/05-session.md:86
msgid "Naming sessions"
msgstr ""

#: ../../manuscript/05-session.md:88
msgid ""
"Sometimes, the default session name given by tmux isn't descriptive "
"enough. It only takes a few seconds to update it."
msgstr ""

#: ../../manuscript/05-session.md:91
msgid ""
"You can name it whatever you want. Typically, if I'm working on multiple "
"web projects in one session, I'll name it \"web\". If I'm assigning one "
"software project to a single session, I'll name it after the software "
"project. You'll likely develop your own naming conventions, but anything "
"is more descriptive than the default."
msgstr ""

#: ../../manuscript/05-session.md:99
msgid ""
"If you don't name your sessions, it'll be difficult to keep track of what"
" the session contains. Sometimes, you may forget you have a project "
"opened, especially if your machine has been running for a few days, "
"weeks, or months. You can save time by reattaching your session and avoid"
" creating a duplicate."
msgstr ""

#: ../../manuscript/05-session.md:104
msgid ""
"You can rename sessions from within tmux with Prefix + .  The status bar "
"will be temporarily altered into a text field to allow altering the "
"session name."
msgstr ""

#: ../../manuscript/05-session.md:108
msgid "Through command line, you can try:"
msgstr ""

#: ../../manuscript/05-session.md:110
msgid ""
"{language=shell, line-numbers=off} $ tmux rename-session -t 1 \"my "
"session\""
msgstr ""

#: ../../manuscript/05-session.md:113
msgid "Does my session exist?"
msgstr ""

#: ../../manuscript/05-session.md:115
msgid ""
"If you're scripting tmux, you will want to see if a session exists. has-"
"session will return a 0 exit code if the session exists, but will report "
"a 1 exit code and print an error if a session does not exist."
msgstr ""

#: ../../manuscript/05-session.md:120
msgid "{language=shell, line-numbers=off} $ tmux has-session -t 1"
msgstr ""

#: ../../manuscript/05-session.md:123
msgid "It assumes the session \"1\" exists; it'll just return 0 with no output."
msgstr ""

#: ../../manuscript/05-session.md:125
msgid "But if it doesn't, you'll get something like this in a response:"
msgstr ""

#: ../../manuscript/05-session.md:127
msgid ""
"{language=shell, line-numbers=off} $ tmux has-session -t 1 > can't find "
"session 1"
msgstr ""

#: ../../manuscript/05-session.md:131
msgid "To try it in a shell script:"
msgstr ""

#: ../../manuscript/05-session.md:133
msgid ""
"{language=shell, line-numbers=off} if tmux has-session -t 0 ; then echo "
"\"has session 0\" fi"
msgstr ""

#: ../../manuscript/05-session.md:140
msgid ""
"In this chapter, you learned how to rename sessions for organizational "
"purposes and how to switch between them quickly."
msgstr ""

#: ../../manuscript/05-session.md:143
msgid ""
"You'll always be attached to a session when you're using a client in "
"tmux. When the last remaining session is closed, the server will close "
"also."
msgstr ""

#: ../../manuscript/05-session.md:146
msgid ""
"Think of sessions as workspaces designed to help organize a set of "
"windows, analogous to virtual desktop spaces in GUI computing."
msgstr ""

#: ../../manuscript/05-session.md:150
msgid ""
"In the next chapter, we will go into windows, which, like sessions, are "
"also nameable and let you switch between them."
msgstr ""

#: ../../manuscript/06-window.md:1
msgid "Windows {#windows}"
msgstr ""

#: ../../manuscript/06-window.md:3
msgid "Windows hold panes. They reside within a session."
msgstr ""

#: ../../manuscript/06-window.md:5
msgid ""
"They also have layouts, which can be one of many preset dimensions or a "
"custom one done through pane resizing."
msgstr ""

#: ../../manuscript/06-window.md:10
msgid ""
"You can see the current windows through the status bar at the bottom of "
"tmux."
msgstr ""

#: ../../manuscript/06-window.md:13
msgid "Creating windows"
msgstr ""

#: ../../manuscript/06-window.md:15
msgid ""
"All sessions start with at least one window open. From there, you can "
"create and kill windows as you see fit."
msgstr ""

#: ../../manuscript/06-window.md:18
msgid ""
"Window indexes are numbers tmux uses to determine ordering. The first "
"window's index is 0, unless you set it via base-index in your "
"configuration. I usually set -g base-index 1 in my tmux configuration, "
"since 0 is after 9 on the keyboard."
msgstr ""

#: ../../manuscript/06-window.md:23
msgid ""
"Prefix + c will create a new window at the first open index. So, if "
"you're in the first window, and there is no second window created, it "
"will create the second window. If the second window is already taken, and"
" the third hasn't been created, it will create the third window."
msgstr ""

#: ../../manuscript/06-window.md:28
msgid ""
"If the base_index is 1 and there are 7 windows created, with the 5th "
"window missing, creating a new window will fill the empty 5th index, "
"since it's the next one in order and nothing is filling it. The next "
"created window would be the eighth."
msgstr ""

#: ../../manuscript/06-window.md:33
msgid "Naming windows"
msgstr ""

#: ../../manuscript/06-window.md:35
msgid ""
"Just like with sessions, windows can have names. Labelling them helps "
"keep track of what you're doing inside them."
msgstr ""

#: ../../manuscript/06-window.md:40
msgid ""
"When inside tmux, the shortcut Prefix + , is most commonly used. It opens"
" a prompt in the tmux status line, where you can alter the name of the "
"current window."
msgstr ""

#: ../../manuscript/06-window.md:44
msgid ""
"The default numbers given to windows also become muscle memory after a "
"while. But naming helps you when you're in a new tmux flow and want to "
"organize yourself. Also, if you're sharing tmux with another user, it's "
"good practice to give a hint what's inside the windows."
msgstr ""

#: ../../manuscript/06-window.md:49
msgid "Traversing windows"
msgstr ""

#: ../../manuscript/06-window.md:51
msgid ""
"Moving around windows is done in two ways, first, by iterating through "
"via Prefix + p and Prefix + n and via the window index, which takes you "
"directly to a specific window."
msgstr ""

#: ../../manuscript/06-window.md:55
msgid ""
"Prefix + 1, Prefix + 2, and so on... allows quickly navigating to windows"
" via their index. Unlike window names, which change, indexes are "
"consistent and only require a quick key combo for you to invoke."
msgstr ""

#: ../../manuscript/06-window.md:59
msgid ""
"Prompt for a window index (useful for indexes greater than 9) with Prefix"
" + '. If the window index is 10 or above, this will help you a lot."
msgstr ""

#: ../../manuscript/06-window.md:62
msgid ""
"I> ### Tip: Search + Traverse Windows for Text I> I> You can forward to a"
" window with a match of a text string by doing Prefix + I> f."
msgstr ""

#: ../../manuscript/06-window.md:67
msgid "Bring up the last selected window with Prefix + l."
msgstr ""

#: ../../manuscript/06-window.md:69
msgid ""
"A list of current windows can be displayed with Prefix + w. This also "
"gives some info on what's inside the window. Helpful when juggling a lot "
"of things!"
msgstr ""

#: ../../manuscript/06-window.md:72
msgid "Moving windows"
msgstr ""

#: ../../manuscript/06-window.md:74
msgid ""
"Windows can also be reordered one by one via move-window and its "
"associated shortcut. This is helpful if a window is worth keeping open "
"but not important or rarely looked at. After you move a window, you can "
"continue to reorder them at any point in time after."
msgstr ""

#: ../../manuscript/06-window.md:79
msgid "The command $ tmux move-window can be used to move windows."
msgstr ""

#: ../../manuscript/06-window.md:81
msgid ""
"The accepted arguments are -s (the window you are moving) and -t, where "
"you are moving the window to."
msgstr ""

#: ../../manuscript/06-window.md:84
msgid "You can also use $ tmux movew for short."
msgstr ""

#: ../../manuscript/06-window.md:86
msgid "Example: move the current window to number 2:"
msgstr ""

#: ../../manuscript/06-window.md:88
msgid "{language=shell, line-numbers=off} $ tmux movew -t2"
msgstr ""

#: ../../manuscript/06-window.md:91
msgid "Example: move window 2 to window 1:"
msgstr ""

#: ../../manuscript/06-window.md:93
msgid "{language=shell, line-numbers=off} $ tmux movew -s2 -t1"
msgstr ""

#: ../../manuscript/06-window.md:96
msgid ""
"The shortcut to prompt for an index to move the current window to is "
"Prefix + .."
msgstr ""

#: ../../manuscript/06-window.md:99
msgid "Layouts {#window-layouts}"
msgstr ""

#: ../../manuscript/06-window.md:101
msgid ""
"Prefix + space switches window layouts. These are preset configurations "
"automatically adjusting proportions of panes."
msgstr ""

#: ../../manuscript/06-window.md:104
msgid "As of tmux 2.3, the supported layouts are:"
msgstr ""

#: ../../manuscript/06-window.md:121
msgid "Specific touch-ups can be done via resizing panes."
msgstr ""

#: ../../manuscript/06-window.md:123
msgid ""
"To reset the proportions of the layout (such as after splitting or "
"resizing panes), you have to run $ tmux select-layout again for the "
"layout."
msgstr ""

#: ../../manuscript/06-window.md:126
msgid ""
"This is different behavior than some tiling window managers. awesome and "
"xmonad, for instance, automatically handle proportions upon new items "
"being added to their layouts."
msgstr ""

#: ../../manuscript/06-window.md:131
msgid ""
"To allow easy resetting to a sensible layout across machines and terminal"
" dimensions, you can try this in your config:"
msgstr ""

#: ../../manuscript/06-window.md:134
msgid ""
"{language=shell, line-numbers=off} bind m set-window-option main-pane-"
"height 60; select-layout main-horizontal"
msgstr ""

#: ../../manuscript/06-window.md:137
msgid ""
"This allows you to set a main-horizontal layout and automatically set the"
" bottom panes proportionally on the bottom every time you do Prefix + m."
msgstr ""

#: ../../manuscript/06-window.md:140
msgid ""
"Layouts can also be custom. To get the custom layout snippet for your "
"current window, try this:"
msgstr ""

#: ../../manuscript/06-window.md:143
msgid ""
"{language=shell, line-numbers=off} $ tmux lsw -F \"#{window_active} "
"#{window_layout}\" | grep \"^1\" | cut -d \" \" -f2"
msgstr ""

#: ../../manuscript/06-window.md:146
msgid "To apply this layout:"
msgstr ""

#: ../../manuscript/06-window.md:148
msgid ""
"{language=shell, line-numbers=off} $ tmux lsw -F \"#{window_active} "
"#{window_layout}\" | grep \"^1\" | cut -d \" \" -f2 > "
"5aed,176x79,0,0[176x59,0,0,0,176x19,0,60{87x19,0,60,1,88x19,88,60,2}]"
msgstr ""

#: ../../manuscript/06-window.md:155
msgid "Closing windows"
msgstr ""

#: ../../manuscript/06-window.md:157
msgid ""
"There are two ways to kill a window. First, exit or kill every pane in "
"the window. Panes can be killed via Prefix + x or by Ctrl + d within the "
"pane's shell. The second way, Prefix + &, prompts if you really want to "
"delete the window. Warning: this will destroy all the window's panes, "
"along with the processes within them."
msgstr ""

#: ../../manuscript/06-window.md:163
msgid "From inside the current window, try this:"
msgstr ""

#: ../../manuscript/06-window.md:165
msgid "{language=shell, line-numbers=off} $ tmux kill-window"
msgstr ""

#: ../../manuscript/06-window.md:168
msgid ""
"Another thing, when scripting or trying to kill the window from outside, "
"use a target of the window index:"
msgstr ""

#: ../../manuscript/06-window.md:171
msgid "{language=shell, line-numbers=off} $ tmux kill-window -t2"
msgstr ""

#: ../../manuscript/06-window.md:174
msgid ""
"If you're trying to find the target of the window to kill, they reside in"
" the number in the middle section of the status line and via $ tmux "
"choose-window. You can hit \"return\" after you're in choose-window to go"
" back to where you were previously."
msgstr ""

#: ../../manuscript/06-window.md:181
msgid ""
"In this chapter, you learned how to manipulate windows via renaming and "
"changing their layouts, a couple of ways to kill windows in a pinch or in"
" when shell scripting tmux. In addition, this chapter demonstrated how to"
" save any tmux layout by printing the window_layout template variable."
msgstr ""

#: ../../manuscript/06-window.md:186
msgid ""
"If you are in a tmux session, you'll always have at least one window "
"open, and you'll be in it. And within the window will be \"pane\"; a "
"shell within a shell. When a window closes all of its panes, the window "
"closes too. In the next chapter, we'll go deeper into panes."
msgstr ""

#: ../../manuscript/07-pane.md:1
msgid "Panes {#panes}"
msgstr ""

#: ../../manuscript/07-pane.md:3
msgid ""
"Panes are pseudoterminals encapsulating shells (e.g., Bash, Zsh). They "
"reside within a window. A terminal within a terminal, they can run shell "
"commands, scripts, and programs, like vim, emacs, top, htop, irssi, "
"weechat, and so on within them."
msgstr ""

#: ../../manuscript/07-pane.md:10
msgid "Creating new panes"
msgstr ""

#: ../../manuscript/07-pane.md:12
msgid ""
"To create a new pane, you can split-window from within the current window"
" and pane you are in."
msgstr ""

#: ../../manuscript/07-pane.md:34
msgid ""
"You can continue to create panes until you've reached the limit of what "
"the terminal can fit. This depends on the dimensions of your terminal. A "
"normal window will usually have 1 to 5 panes open."
msgstr ""

#: ../../manuscript/07-pane.md:40
msgid ""
"{language=shell, line-numbers=off} # Create pane horizontally, $HOME "
"directory, 50% width of current pane $ tmux split-window -h -c $HOME -p "
"50 vim"
msgstr ""

#: ../../manuscript/07-pane.md:44
msgid "{width=75%} ![](images/07-pane/splitw/-h -c $HOME -p 50 vim - 2 panes.png)"
msgstr ""

#: ../../manuscript/07-pane.md:47
#, python-format
msgid ""
"{language=shell, line-numbers=off} # create new pane, split vertically "
"with 75% height tmux split-window -p 75"
msgstr ""

#: ../../manuscript/07-pane.md:51
msgid "{width=75%} ![](images/07-pane/splitw/-p 75.png)"
msgstr ""

#: ../../manuscript/07-pane.md:54 ../../manuscript/99-cheatsheets.md:69
#: ../../manuscript/99-cheatsheets.md:107
#: ../../manuscript/99-cheatsheets.md:126
#: ../../manuscript/99-cheatsheets.md:161
#: ../../manuscript/99-cheatsheets.md:207
msgid "{pagebreak}"
msgstr ""

#: ../../manuscript/07-pane.md:56
msgid "Traversing Panes {#pane-traversal}"
msgstr ""

#: ../../manuscript/07-pane.md:89
msgid ""
"I> Moving around vimtuitively I> I> If you like vim (hjkl) keybindings, "
"add these to your config: I> I> {language=shell, line-numbers=off} I>"
"     # hjkl pane traversal I>     bind h select-pane -L I>     bind j "
"select-pane -D I>     bind k select-pane -U I>     bind l select-pane -R"
msgstr ""

#: ../../manuscript/07-pane.md:100
msgid "Zoom in {#zoom-pane}"
msgstr ""

#: ../../manuscript/07-pane.md:102
msgid "To zoom in on a pane, navigate to it and do Prefix + z."
msgstr ""

#: ../../manuscript/07-pane.md:104
msgid "You can unzoom by pressing Prefix + z again."
msgstr ""

#: ../../manuscript/07-pane.md:106
msgid ""
"In addition, you can unzoom and move to an adjacent pane at the same time"
" using a pane traversal key."
msgstr ""

#: ../../manuscript/07-pane.md:109
msgid ""
"Behind the scenes, the keybinding is a shortcut for $ tmux resize-pane "
"-Z. So, if you ever wanted to script tmux to zoom/unzoom a pane or apply "
"this functionality to a custom key binding, you can do that too, for "
"instance:"
msgstr ""

#: ../../manuscript/07-pane.md:113
msgid "{line-numbers=off} bind-key -T prefix y resize-pane -Z"
msgstr ""

#: ../../manuscript/07-pane.md:116
msgid "This would have Prefix + y zoom and unzoom panes."
msgstr ""

#: ../../manuscript/07-pane.md:118
msgid "Resizing panes {#resizing-panes}"
msgstr ""

#: ../../manuscript/07-pane.md:120
msgid ""
"Pane size can be adjusted within windows via window layouts and resize-"
"pane. Adjusting window layout switches the proportions and order of the "
"panes. Resizing the panes targets a specific pane inside the window "
"containing it, also shrinking or growing the size of the other columns or"
" rows. It's like adjusting your car seat or reclining on a flight; if you"
" take up more space, something else will have less space."
msgstr ""

#: ../../manuscript/07-pane.md:170
msgid "Outputting pane to a file"
msgstr ""

#: ../../manuscript/07-pane.md:172
msgid "You can output the display of a pane to a file."
msgstr ""

#: ../../manuscript/07-pane.md:174
msgid ""
"{language=shell, line-numbers=off} $ tmux pipe-pane -o 'cat "
">>~/output.#I-#P'"
msgstr ""

#: ../../manuscript/07-pane.md:177
msgid ""
"The #I and #P are formats for window index and pane index, so the file "
"created is unique. Clever!"
msgstr ""

#: ../../manuscript/07-pane.md:182
msgid ""
"Panes are shells within a shell. You can keep adding panes to a tmux "
"window until you run out of room on your screen. Within your shell, you "
"can tail -F log files, write and run scripts, and run curses-powered "
"applications, like vim, top, htop, ncmpcpp, irssi, weechat, mutt, and so "
"on."
msgstr ""

#: ../../manuscript/07-pane.md:187
msgid ""
"You will always have at least one pane open. Once you kill the last pane "
"in the window, the window will close. Panes are also resizable; you can "
"resize panes by targeting them specifically and changing the window "
"layout."
msgstr ""

#: ../../manuscript/07-pane.md:191
msgid ""
"In the next chapter, we will go into the ways you can customize your tmux"
" shortcuts, status line, and behavior."
msgstr ""

#: ../../manuscript/08-configuration.md:1
msgid "Configuration {#config}"
msgstr ""

#: ../../manuscript/08-configuration.md:3
msgid ""
"Most tmux users break away from the defaults by creating their own "
"customized configurations. These configurations vary from the trivial, "
"such as adding keybindings, and adjusting the prefix key, to complex "
"things, such as decking out the status bar with system stats and fancy "
"glyphs via powerlines."
msgstr ""

#: ../../manuscript/08-configuration.md:9
msgid ""
"Configuration of tmux is managed through .tmux.conf in your $HOME "
"directory. The paths ~/.tmux.conf and $HOME/.tmux.conf should work on OS "
"X, Linux, and BSD."
msgstr ""

#: ../../manuscript/08-configuration.md:13
msgid ""
"Configuration is applied upon initially starting tmux. The contents of "
"the configuration are tmux commands. The file can be reloaded later via "
"source-file, which is discussed in this chapter."
msgstr ""

#: ../../manuscript/08-configuration.md:17
msgid ""
"For a sample config, I maintain a pretty decked out one at "
"https://github.com/tony/tmux-config. It's permissively licensed, and "
"you're free to copy and paste from it as you wish."
msgstr ""

#: ../../manuscript/08-configuration.md:21
msgid ""
"I> Custom Configs I> I> You can specify your config via the -f command. "
"Like this: I> I> {language=shell, line-numbers=off} I>     $ tmux -f "
"path/to/config.conf I> I> Note: If a tmux server is running in the "
"background and you want I> to test a fresh config, you must either shut "
"down the rest of the I> tmux sessions or use a different socket name. "
"Like this: I> I> {language=shell, line-numbers=off} I>     $ tmux -f "
"path/to/config.conf -Ltesting_tmux I> I> And you can treat everything "
"like normal; just keep passing -Ltesting_tmux I> (or whatever socket name"
" you feel like testing configs with) for reuse. I> I> {language=shell, "
"line-numbers=off} I>     $ tmux -Ltesting_tmux attach"
msgstr ""

#: ../../manuscript/08-configuration.md:41
msgid "Reloading configuration {#reload-config}"
msgstr ""

#: ../../manuscript/08-configuration.md:43
msgid ""
"You can apply config files in live tmux sessions. Compare this to source "
"or \"dot\" in the POSIX standard."
msgstr ""

#: ../../manuscript/08-configuration.md:47
msgid "Prefix + : will open the tmux prompt, then type:"
msgstr ""

#: ../../manuscript/08-configuration.md:49
msgid ":source /path/to/config.conf"
msgstr ""

#: ../../manuscript/08-configuration.md:51
msgid "And hit return."
msgstr ""

#: ../../manuscript/08-configuration.md:53
msgid ""
"$ tmux source-file /path/to/config.conf can also achieve the same result "
"via command line."
msgstr ""

#: ../../manuscript/08-configuration.md:56
msgid ""
"I> Easy reloadin' I> I> Even better, often, you will keep your default "
"tmux config stored in I> $HOME/.tmux.conf. So, what can you do? You can "
"bind-key to I> source-file ~/.tmux.conf: I> I> bind r source ~/.tmux.conf"
" I> I> You can also have it give you a confirmation afterwards: I> I> "
"bind r source ~/.tmux.conf\\; display \"~/.tmux.conf sourced!\" I> I> "
"Now, you can type Prefix + r to get the config to reload."
msgstr ""

#: ../../manuscript/08-configuration.md:70
msgid ""
"Note that reloading the configuration only re-runs the configuration "
"file. It will not reset keybindings or styling you apply to tmux."
msgstr ""

#: ../../manuscript/08-configuration.md:73
msgid "How configs work"
msgstr ""

#: ../../manuscript/08-configuration.md:75
msgid ""
"The tmux configuration is processed just like run commands in a ~/.zshrc "
"or ~/.bashrc file. bind r source ~/.tmux.conf in the tmux configuration "
"is the same as $ tmux bind r source ~/.tmux.conf."
msgstr ""

#: ../../manuscript/08-configuration.md:79
msgid ""
"You could always create a shell script prefixing tmux in front of "
"commands and run it on fresh servers. The result is the same. Same goes "
"if you manually type in $ tmux set-option and $ tmux bind-key commands "
"into any terminal (in or outside tmux)."
msgstr ""

#: ../../manuscript/08-configuration.md:84
msgid "This in .tmux.conf:"
msgstr ""

#: ../../manuscript/08-configuration.md:86
msgid "{language=shell, line-numbers=off} bind-key a send-prefix"
msgstr ""

#: ../../manuscript/08-configuration.md:89
msgid "Is the same as having no .tmux.conf (or $ tmux -f/dev/null) and typing:"
msgstr ""

#: ../../manuscript/08-configuration.md:91
msgid "{language=shell, line-numbers=off} $ tmux bind-key a send-prefix"
msgstr ""

#: ../../manuscript/08-configuration.md:94
msgid "in a newly started tmux server."
msgstr ""

#: ../../manuscript/08-configuration.md:96
msgid ""
"The important thing to internalize is that a tmux configuration consists "
"of setting server options (set-option -s), global session (set-option "
"-g), and window options (set-window-option -g)."
msgstr ""

#: ../../manuscript/08-configuration.md:100
msgid ""
"The rest of this chapter is going to proceed cookbook-style. You can pick"
" out these tweaks and add them to your .tmux.conf and reload."
msgstr ""

#: ../../manuscript/08-configuration.md:103
msgid "Server options"
msgstr ""

#: ../../manuscript/08-configuration.md:105
msgid "Server options are set with set-option -s option value."
msgstr ""

#: ../../manuscript/08-configuration.md:107
msgid "Tweak timing between key sequences"
msgstr ""

#: ../../manuscript/08-configuration.md:109
msgid "{line-numbers=off} set -s escape-time 0"
msgstr ""

#: ../../manuscript/08-configuration.md:112
msgid "Terminal coloring"
msgstr ""

#: ../../manuscript/08-configuration.md:114
msgid ""
"If you're having an issue with color detail in tmux, it may help to set "
"default-terminal to screen-256color."
msgstr ""

#: ../../manuscript/08-configuration.md:117
msgid "{line-numbers=off} set -g default-terminal \"screen-256color\""
msgstr ""

#: ../../manuscript/08-configuration.md:120
msgid "This sets the TERM variable in new panes."
msgstr ""

#: ../../manuscript/08-configuration.md:122
msgid "Session options"
msgstr ""

#: ../../manuscript/08-configuration.md:124
msgid ""
"Aside from the status bar, covered in the next chapter, most user "
"configuration will be custom keybindings. This section covers the few "
"generic options, and the next section goes into snippets involving "
"keybindings."
msgstr ""

#: ../../manuscript/08-configuration.md:128
msgid "Base index"
msgstr ""

#: ../../manuscript/08-configuration.md:130
msgid ""
"This was mentioned earlier in the book, but it's a favorite tweak of many"
" tmux users, who find it more intuitive to start their window counting at"
" 1, rather than the default, 0. To set the starting number (base index) "
"for windows:"
msgstr ""

#: ../../manuscript/08-configuration.md:134
msgid "{line-numbers=off} set -g base-index 1"
msgstr ""

#: ../../manuscript/08-configuration.md:137
msgid ""
"Setting base-index assures newly created windows start at 1 and count "
"upwards."
msgstr ""

#: ../../manuscript/08-configuration.md:139
msgid "Window options"
msgstr ""

#: ../../manuscript/08-configuration.md:141
msgid ""
"Window options are set via set-option -w or set-window-option. They are "
"the same thing."
msgstr ""

#: ../../manuscript/08-configuration.md:144
msgid "Automatic window naming"
msgstr ""

#: ../../manuscript/08-configuration.md:146
msgid ""
"Setting automatic-rename alters the name of the window based upon its "
"active pane:"
msgstr ""

#: ../../manuscript/08-configuration.md:149
msgid "{line-numbers=off} set-window-option -g automatic-rename"
msgstr ""

#: ../../manuscript/08-configuration.md:152
msgid ""
"Automatic renaming will be disabled for the window if you rename it "
"manually."
msgstr ""

#: ../../manuscript/08-configuration.md:154
#: ../../manuscript/99-cheatsheets.md:71
msgid "Keybindings"
msgstr ""

#: ../../manuscript/08-configuration.md:156
msgid "Prefix key"
msgstr ""

#: ../../manuscript/08-configuration.md:158
msgid ""
"The default prefix key in tmux is <Ctrl-b>. You can customize it by "
"setting a new prefix and unsetting the default. To set the prefix to "
"<Ctrl-a>, like GNU Screen, try this:"
msgstr ""

#: ../../manuscript/08-configuration.md:162
msgid ""
"{line-numbers=off} set-option -g prefix C-a unbind-key C-b bind-key a "
"send-prefix"
msgstr ""

#: ../../manuscript/08-configuration.md:167
msgid "New window with prompt"
msgstr ""

#: ../../manuscript/08-configuration.md:169
msgid "Prompt for window name upon creating a new window, Prefix + C (capital C):"
msgstr ""

#: ../../manuscript/08-configuration.md:171
#, python-format
msgid ""
"{line-numbers=off} bind-key C command-prompt -p \"Name of new window: \" "
"\"new-window -n '%%'\""
msgstr ""

#: ../../manuscript/08-configuration.md:174
msgid "Vi copy-paste keys"
msgstr ""

#: ../../manuscript/08-configuration.md:176
msgid ""
"This is comprised of two-parts: Setting the mode-keys window option to vi"
" and setting the vi-copy bindings to use v to begin selection and y to "
"yank."
msgstr ""

#: ../../manuscript/08-configuration.md:179
msgid ""
"{line-numbers=off} # Vi copypaste mode set-window-option -g mode-keys vi "
"bind-key -t vi-copy 'v' begin-selection bind-key -t vi-copy 'y' copy-"
"selection"
msgstr ""

#: ../../manuscript/08-configuration.md:185
msgid "hjkl / vi-like pane traversal"
msgstr ""

#: ../../manuscript/08-configuration.md:187
msgid ""
"Another one for vi fans, this keeps your right hand on the home row when "
"moving directionally across panes in a window."
msgstr ""

#: ../../manuscript/08-configuration.md:190
msgid ""
"{line-numbers=off} bind h select-pane -L bind j select-pane -D bind k "
"select-pane -U bind l select-pane -R"
msgstr ""

#: ../../manuscript/08-configuration.md:196
msgid "Further inspiration"
msgstr ""

#: ../../manuscript/08-configuration.md:198
msgid ""
"For more ideas, I have a .tmux.conf you can copy-paste from on the "
"internet at https://github.com/tony/tmux-config/blob/master/.tmux.conf."
msgstr ""

#: ../../manuscript/08-configuration.md:201
msgid "In the next chapter, we will go into configuring the status line."
msgstr ""

#: ../../manuscript/09-status-bar.md:1
msgid "Status bar and styling {#status-bar}"
msgstr ""

#: ../../manuscript/09-status-bar.md:3
msgid ""
"The status bar, or status line, serves as a customizable taskbar in the "
"bottom of tmux. It is comprised of 3 sections. The status fields on "
"either side of the status line are customizable. The center field is a "
"list of windows."
msgstr ""

#: ../../manuscript/09-status-bar.md:9
msgid "The status-left and status-right option can be configured with  variables."
msgstr ""

#: ../../manuscript/09-status-bar.md:11
msgid ""
"It's configurable through the .tmux.conf file and modifiable live through"
" using $ tmux set-option."
msgstr ""

#: ../../manuscript/09-status-bar.md:14
msgid ""
"I> Finding your current status line settings I> I> {language=shell, line-"
"numbers=off} I>     $ tmux show-options -g | grep status"
msgstr ""

#: ../../manuscript/09-status-bar.md:19
msgid "Window status symbols"
msgstr ""

#: ../../manuscript/09-status-bar.md:21
msgid "This window list is between the left and right status bar regions."
msgstr ""

#: ../../manuscript/09-status-bar.md:23
msgid "tmux indicates status of a window through symbols. See below:"
msgstr ""

#: ../../manuscript/09-status-bar.md:64
msgid ""
"Reminder: A pane can be zoomed via Prefix + z. To unzoom, press Prefix + "
"z or move left / right / up / down panes."
msgstr ""

#: ../../manuscript/09-status-bar.md:67
msgid "Date and time"
msgstr ""

#: ../../manuscript/09-status-bar.md:69
msgid "status-left and status-right accept variables for the date."
msgstr ""

#: ../../manuscript/09-status-bar.md:71
msgid ""
"This happens via piping the status templates through format_expand_time "
"in format.c, which routes right into strftime(3) from time.h."
msgstr ""

#: ../../manuscript/09-status-bar.md:75
msgid ""
"A full list of variables can be found in the documentation for "
"strftime(3). This can be viewed through $ man strftime on Unix-like "
"systems."
msgstr ""

#: ../../manuscript/09-status-bar.md:78
msgid "Shell command output"
msgstr ""

#: ../../manuscript/09-status-bar.md:80
msgid ""
"You can also call applications, such as tmux-mem-cpu-load, conky, and "
"powerline."
msgstr ""

#: ../../manuscript/09-status-bar.md:83
msgid ""
"For this example, we'll use tmux-mem-cpu-load. This works on Unix-like "
"systems like FreeBSD, Linux distributions, and macOS."
msgstr ""

#: ../../manuscript/09-status-bar.md:86
msgid ""
"To build from source, you must have CMake and git, which are available "
"through your package manager. You must have a C++ compiler. On macOS, "
"install Xcode CLI Utilities. You can do this by going to Applications -> "
"Utilities, launching Terminal.app and typing $ xcode-select --install. "
"macOS can use Homebrew to install the CMake and git package. Major Linux "
"distributions package CMake, clang, and git."
msgstr ""

#: ../../manuscript/09-status-bar.md:93
msgid "Before this step, you can cd into any directory you're ok keeping code in."
msgstr ""

#: ../../manuscript/09-status-bar.md:95
msgid ""
"{language=shell, line-numbers=off} $ git clone https://github.com/thewtex"
"/tmux-mem-cpu-load.git $ cd tmux-mem-cpu-load $ mkdir ./build $ cd "
"./build $ cmake .. $ make"
msgstr ""

#: ../../manuscript/09-status-bar.md:109
msgid "If successful, you should see the output below:"
msgstr ""

#: ../../manuscript/09-status-bar.md:111
msgid ""
"{language=shell, line-numbers=off} [100%] Built target tmux-mem-cpu-load "
"Install the project... -- Install configuration: \"MinSizeRel\" -- "
"Installing: /usr/local/bin/tmux-mem-cpu-load"
msgstr ""

#: ../../manuscript/09-status-bar.md:117
msgid ""
"You can remove the source code you cloned from the computer. The compiled"
" application is installed."
msgstr ""

#: ../../manuscript/09-status-bar.md:120
msgid ""
"You can now add #(tmux-mem-cpu-load) to your status-left or status-right "
"option. In the \"Dressed up\" example below, I use status-left and also "
"theme it to be green:"
msgstr ""

#: ../../manuscript/09-status-bar.md:124
msgid "#[fg=green,bg=default,bright]#(tmux-mem-cpu-load)"
msgstr ""

#: ../../manuscript/09-status-bar.md:126
msgid ""
"So to apply it to your theme, you need to double check what you already "
"have. You may have information on there you want to keep."
msgstr ""

#: ../../manuscript/09-status-bar.md:129
#, python-format
msgid ""
"{language=shell, line-numbers=off} $ tmux show-option -g status-right "
"status-right \" \"#{=21:pane_title}\" %H:%M %d-%b-%y\""
msgstr ""

#: ../../manuscript/09-status-bar.md:133
msgid ""
"Copy what you had in response (or change, rearrange as you see fit) then "
"add the #(tmux-mem-cpu-load) to it. You can apply the new status line in "
"your current tmux session via $ tmux set-option -g status-right:"
msgstr ""

#: ../../manuscript/09-status-bar.md:137
#, python-format
msgid ""
"{language=shell, line-numbers=off} $ tmux set-option -g status-right "
"'\"#{=21:pane_title}\" #(tmux-mem-cpu-load) %H:%M %d-%b-%y'"
msgstr ""

#: ../../manuscript/09-status-bar.md:140
msgid ""
"Also, note how I switched out the double quotes on either side of the "
"option with single quotes. This is required, since there are double "
"quotes inside."
msgstr ""

#: ../../manuscript/09-status-bar.md:143
msgid ""
"You can do this with anything, for instance, try adding uptime. This "
"could be done by adding #(uptime) to your status line. Typically the "
"output is pretty long, so trim it down by doing something like this:"
msgstr ""

#: ../../manuscript/09-status-bar.md:147
msgid "`#(uptime | cut -f 4-5 -d \" \" | cut -f 1 -d \",\")``"
msgstr ""

#: ../../manuscript/09-status-bar.md:149
msgid "In the next section, we go into how you can style (color) tmux."
msgstr ""

#: ../../manuscript/09-status-bar.md:151
msgid "Styling"
msgstr ""

#: ../../manuscript/09-status-bar.md:153
msgid "The colors available to tmux are:"
msgstr ""

#: ../../manuscript/09-status-bar.md:155
msgid "black, red, green, yellow, blue, magenta, cyan, white."
msgstr ""

#: ../../manuscript/09-status-bar.md:156
msgid ""
"bright colors, such as brightred, brightgreen, brightyellow, brightblue, "
"brightmagenta, brightcyan."
msgstr ""

#: ../../manuscript/09-status-bar.md:158
msgid "colour0 through colour255 from the 256-color set."
msgstr ""

#: ../../manuscript/09-status-bar.md:159
msgid "default"
msgstr ""

#: ../../manuscript/09-status-bar.md:160
msgid "hexadecimal RGB code like #000000, #FFFFFF, similar to HTML colors."
msgstr ""

#: ../../manuscript/09-status-bar.md:162
msgid "Status line"
msgstr ""

#: ../../manuscript/09-status-bar.md:164
msgid ""
"You can use [bg=color] and [fg=color] to adjust the text color and "
"background within for status line text. This works on status-left and "
"status-right."
msgstr ""

#: ../../manuscript/09-status-bar.md:168
msgid "Let's say you want to style the background:"
msgstr ""

#: ../../manuscript/09-status-bar.md:170
msgid "Command: $ tmux set-option status-style fg=white,bg=black"
msgstr ""

#: ../../manuscript/09-status-bar.md:172
msgid "In config: status-style fg=white,bg=black"
msgstr ""

#: ../../manuscript/09-status-bar.md:174
msgid ""
"In the examples at the end of the chapter, you will see complete examples"
" of how colors can be used."
msgstr ""

#: ../../manuscript/09-status-bar.md:177
msgid "Clock styling"
msgstr ""

#: ../../manuscript/09-status-bar.md:179
msgid "You can style the color of the tmux clock via:"
msgstr ""

#: ../../manuscript/09-status-bar.md:181
msgid "{lang=\"text\", line-numbers=off} set-option -g clock-mode-colour white"
msgstr ""

#: ../../manuscript/09-status-bar.md:184
msgid ""
"Reminder: Clock mode can be opened with $ tmux clock-mode or Prefix + t. "
"Pressing any key will exit clock mode."
msgstr ""

#: ../../manuscript/09-status-bar.md:187
msgid "Prompt colors"
msgstr ""

#: ../../manuscript/09-status-bar.md:189
msgid ""
"The benefit of wrapping your brain around this styling is you will see it"
" message-command-style, message style and so on."
msgstr ""

#: ../../manuscript/09-status-bar.md:192
msgid "Let's try this:"
msgstr ""

#: ../../manuscript/09-status-bar.md:194
msgid ""
"{lang=\"shell\", line-numbers=off} $ tmux set-option -ag message-style "
"fg=yellow,blink; set-option -ag message-style bg=black"
msgstr ""

#: ../../manuscript/09-status-bar.md:199
msgid "Styling while using tmux"
msgstr ""

#: ../../manuscript/09-status-bar.md:201
msgid ""
"So, you want to customize your tmux status line before you write the "
"changes to your config file."
msgstr ""

#: ../../manuscript/09-status-bar.md:204
msgid ""
"Start by grabbing your current status line section you want to edit, for "
"instance:"
msgstr ""

#: ../../manuscript/09-status-bar.md:207
#, python-format
msgid ""
"{lang=\"text\", line-numbers=off} $ tmux show-options -g status-left > "
"status-left \"[#S] \" $ tmux show-options -g status-right > status-right "
"\" \"#{=21:pane_title}\" %H:%M %d-%b-%y\""
msgstr ""

#: ../../manuscript/09-status-bar.md:213
msgid "Also, you can try to snip off the variable with | cut -d' ' -f2-:"
msgstr ""

#: ../../manuscript/09-status-bar.md:215
#, python-format
msgid ""
"{lang=\"text\", line-numbers=off} $ tmux show-options -g status-left | "
"cut -d' ' -f2- > \"[#S] \" $ tmux show-options -g status-right | cut -d' "
"' -f2- > \" \"#{=21:pane_title}\" %H:%M %d-%b-%y\""
msgstr ""

#: ../../manuscript/09-status-bar.md:221
msgid "Then, add the options to your configuration."
msgstr ""

#: ../../manuscript/09-status-bar.md:223
msgid ""
"To be sure your configuration fully works, you can start it in a "
"different server via tmux -Lrandom, verify the settings, and close it. "
"This is helpful to make sure your config file isn't missing any styling "
"info."
msgstr ""

#: ../../manuscript/09-status-bar.md:227
msgid "Toggling status line"
msgstr ""

#: ../../manuscript/09-status-bar.md:229
msgid "The tmux status line can be hidden, as well. Turn it off:"
msgstr ""

#: ../../manuscript/09-status-bar.md:231
msgid "{language=shell, line-numbers=off} $ tmux set-option status off"
msgstr ""

#: ../../manuscript/09-status-bar.md:234
msgid "And, turn it on:"
msgstr ""

#: ../../manuscript/09-status-bar.md:236
msgid "{language=shell, line-numbers=off} $ tmux set-option status on"
msgstr ""

#: ../../manuscript/09-status-bar.md:239
msgid ""
"The above is best for scripting, but if you're binding it to a keyboard "
"shortcut, toggling, or reversing the current option, it can be done via "
"omitting the on/off value:"
msgstr ""

#: ../../manuscript/09-status-bar.md:243
msgid "{language=shell, line-numbers=off} $ tmux set-option status"
msgstr ""

#: ../../manuscript/09-status-bar.md:246
msgid "Bind toggling status line to Prefix + q:"
msgstr ""

#: ../../manuscript/09-status-bar.md:248
msgid "{language=shell, line-numbers=off} $ tmux bind-key q set-option status"
msgstr ""

#: ../../manuscript/09-status-bar.md:251
msgid "Example: Default config"
msgstr ""

#: ../../manuscript/09-status-bar.md:255
msgid ""
"This is an example of the default config you see if your tmux "
"configuration has no status styling."
msgstr ""

#: ../../manuscript/09-status-bar.md:258
#, python-format
msgid ""
"{line-numbers=off} status on status-interval 15 status-justify left "
"status-keys vi status-left \"[#S] \" status-left-length 10 status-left-"
"style default status-position bottom status-right \" "
"\"#{=21:pane_title}\" %H:%M %d-%b-%y\" status-right-length 40 status-"
"right-style default status-style fg=black,bg=green"
msgstr ""

#: ../../manuscript/09-status-bar.md:272
msgid "Example: Dressed up {#status-bar-example-dressed-up}"
msgstr ""

#: ../../manuscript/09-status-bar.md:274
msgid "![](images/09-status-bar/dressed up.png)"
msgstr ""

#: ../../manuscript/09-status-bar.md:276
#, python-format
msgid ""
"{line-numbers=off} status on status-interval 1 status-justify centre "
"status-keys vi status-left \"#[fg=green]#H #[fg=black]• "
"#[fg=green,bright]#(uname -r | cut -c 1-6)#[default]\" status-left-length"
" 20 status-left-style default status-position bottom status-right "
"\"#[fg=green,bg=default,bright]#(tmux-mem-cpu-load) "
"#[fg=red,dim,bg=default]#(uptime | cut -f 4-5 -d \" \" | cut -f 1 -d "
"\",\") #[fg=white,bg=default]%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d\""
" status-right-length 140 status-right-style default status-style "
"fg=colour136,bg=colour235"
msgstr ""

#: ../../manuscript/09-status-bar.md:298
msgid ""
"Configs can print the output of an application. In this example, tmux-"
"mem-cpu-load is providing system statistics in the right-side section of "
"the status line."
msgstr ""

#: ../../manuscript/09-status-bar.md:302
msgid ""
"To build tmux-mem-cpu-load, you have to install CMake and have a C++ "
"compiler, like clang or GCC."
msgstr ""

#: ../../manuscript/09-status-bar.md:305
msgid ""
"On Ubuntu, Debian, and Mint machines, you can do this via $ sudo apt-get "
"install cmake build-essential. On macOS w/ brew via $ brew install cmake."
msgstr ""

#: ../../manuscript/09-status-bar.md:309
msgid "Source: https://github.com/tony/tmux-config"
msgstr ""

#: ../../manuscript/09-status-bar.md:311
msgid "Example: Powerline"
msgstr ""

#: ../../manuscript/09-status-bar.md:315
msgid ""
"The most full-featured solution available for tmux status lines is "
"powerline, which heavily utilizes the shell command outputs, not only to "
"give direct system statistics, but also to generate graphical-like "
"styling."
msgstr ""

#: ../../manuscript/09-status-bar.md:320
msgid ""
"To get the styling to work correctly, special fonts must be installed. "
"The easiest way to use this is to install powerline fonts, a collection "
"of fixed width coder fonts patched to support Wingdings-like symbols."
msgstr ""

#: ../../manuscript/09-status-bar.md:325
msgid "Installation instructions are on Read the Docs. For a better idea:"
msgstr ""

#: ../../manuscript/09-status-bar.md:328
msgid ""
"{language=shell, line-numbers=off} $ pip install --user powerline-status "
"psutil"
msgstr ""

#: ../../manuscript/09-status-bar.md:331
msgid ""
"psutil, a required dependency of powerline, is a cross-platform tool to "
"gather system information."
msgstr ""

#: ../../manuscript/09-status-bar.md:334
msgid "Assure you properly configured python with your PATHs, and try this:"
msgstr ""

#: ../../manuscript/09-status-bar.md:337
msgid ""
"{line-numbers=off} set -g status-interval 2 set -g status-right "
"'#(powerline tmux right)'"
msgstr ""

#: ../../manuscript/09-status-bar.md:343
msgid ""
"Configuring the status line is optional. It can use the output of "
"programs installed on your system to give you specialized information, "
"such as CPU, ram, and I/O usage. By default, you'll at least have a "
"window list and a clock."
msgstr ""

#: ../../manuscript/09-status-bar.md:347
msgid ""
"In addition, you can customize the colors of the status line, clock, and "
"prompt. By default, it's only a green bar with dark text, so take some "
"time to customize yours, if you want, and save it to your configuration."
msgstr ""

#: ../../manuscript/09-status-bar.md:351
msgid ""
"In the next chapter, we will go into the command line and scripting "
"features of tmux."
msgstr ""

#: ../../manuscript/10-scripting.md:1
msgid "Scripting tmux {#scripting-tmux}"
msgstr ""

#: ../../manuscript/10-scripting.md:3
msgid "The command line shortcuts and options in tmux is an area often uncharted."
msgstr ""

#: ../../manuscript/10-scripting.md:5
msgid ""
"I will use tables in this chapter. Never get a feeling you have to commit"
" a table to memory immediately. Not my intention, but every person's way "
"of using tmux is slightly different. I want to cover points most likely "
"to benefit people's flows. Full tables are in the cheatsheets."
msgstr ""

#: ../../manuscript/10-scripting.md:10
msgid "Aliases {#aliases}"
msgstr ""

#: ../../manuscript/10-scripting.md:12
msgid ""
"tmux supports a variety of alias commands. With aliases, instead of "
"typing $ tmux attach-session to attach a session, $ tmux attach could do "
"the trick."
msgstr ""

#: ../../manuscript/10-scripting.md:15
msgid ""
"Most aliases come to mind via intuition and are a lot friendlier than "
"typing the full hyphenated commands."
msgstr ""

#: ../../manuscript/10-scripting.md:18
msgid ""
"{width=\"narrow\"} | Command             | Alias     | "
"|---------------------|-----------| | attach-session      | attach    | |"
" break-pane          | breakp    | | capture-pane        | capturep  | | "
"display-panes       | displayp  | | find-window         | findw     | | "
"join-pane           | joinp     | | kill-pane           | killp     | | "
"kill-window         | killw     | | last-pane           | lastp     | | "
"last-window         | last      | | link-window         | linkw     | | "
"list-panes          | lsp       | | list-windows        | lsw       | | "
"move-pane           | movep     | | move-window         | movew     | | "
"new-session         | new       | | new-window          | neww      | | "
"next-layout         | nextl     | | next-window         | next      | | "
"pipe-pane           | pipep     | | previous-layout     | prevl     | | "
"previous-window     | prev      | | rename-window       | renamew   | | "
"resize-pane         | resizep   | | respawn-pane        | respawnp  | | "
"respawn-window      | respawnw  | | rotate-window       | rotatew   | | "
"select-layout       | selectl   | | select-pane         | selectp   | | "
"set-option          | set       | | set-window-option   | setw      | | "
"show-options        | show      | | show-window-options | showw     | | "
"split-window        | splitw    | | swap-pane           | swapp     | | "
"swap-window         | swapw     | | unlink-window       | unlinkw   |"
msgstr ""

#: ../../manuscript/10-scripting.md:59
msgid ""
"If you know the full name of the command, if you were to chop the hyphen "
"(-) from the command and add the first letter of the last word, you'd get"
" the shortcut, e.g., swap-window is swapw, split-window is splitw."
msgstr ""

#: ../../manuscript/10-scripting.md:63
msgid "Pattern matching {#fnmatch}"
msgstr ""

#: ../../manuscript/10-scripting.md:65
msgid ""
"In addition to aliases, tmux commands and arguments may all be accessed "
"via fnmatch(3) patterns."
msgstr ""

#: ../../manuscript/10-scripting.md:69
msgid ""
"For instance, you need not type $ tmux attach-session every time. First, "
"there's the alias of $ tmux attach, but additionally, more concise "
"commands can be used if they partially match the name of the command or "
"the target. tmux's pattern matching allows $ tmux attac, $ tmux att, $ "
"tmux at and $ tmux a to reach $ tmux attach."
msgstr ""

#: ../../manuscript/10-scripting.md:75
msgid "Every tmux command has shorthands; let's try this for $ tmux new-session:"
msgstr ""

#: ../../manuscript/10-scripting.md:77
msgid "{language=shell, line-numbers=off} $ tmux new-session"
msgstr ""

#: ../../manuscript/10-scripting.md:86
msgid "and so on, until:"
msgstr ""

#: ../../manuscript/10-scripting.md:88
msgid ""
"{language=shell, line-numbers=off} $ tmux new- ambiguous command: new-, "
"could be: new-session, new-window"
msgstr ""

#: ../../manuscript/10-scripting.md:92
msgid ""
"The limitation, as seen above, is command matches can collide. Multiple "
"commands begin with new-. So, if you wanted to use matches, $ tmux new-s "
"for a new session or $ tmux new-w for a new window would be the most "
"efficient way. But, the alias of $ tmux new for new session and $ tmux "
"neww for new windows is even more concise than matching, since the "
"special alias exists."
msgstr ""

#: ../../manuscript/10-scripting.md:98
msgid ""
"Patterns can also match targets with window and session names. For "
"instance, a session named mysession can be matched via mys:"
msgstr ""

#: ../../manuscript/10-scripting.md:101
msgid "{language=shell, line-numbers=off} $ tmux attach -t mys"
msgstr ""

#: ../../manuscript/10-scripting.md:104
msgid ""
"Matching targets will fail if a pattern matches more than one item. If 2 "
"sessions exist, named mysession and mysession2, the above command would "
"fail. To target either session, the complete target name must be "
"specified."
msgstr ""

#: ../../manuscript/10-scripting.md:108
msgid "Targets {#targets}"
msgstr ""

#: ../../manuscript/10-scripting.md:110
msgid "If a command allows target specification, it's usually done through -t."
msgstr ""

#: ../../manuscript/10-scripting.md:112
msgid ""
"Think of targets as tmux's way of specifying a unique key in a relational"
" database."
msgstr ""

#: ../../manuscript/10-scripting.md:152
msgid "What I use to help me remember:"
msgstr ""

#: ../../manuscript/10-scripting.md:154
msgid ""
"So, sessions are represented by dollar signs ($) because they hold your "
"projects (ostensibly where you make money or help someone else do it)."
msgstr ""

#: ../../manuscript/10-scripting.md:157
msgid ""
"Windows are represented by the at sign (@). So, windows are like "
"referencing / messaging a user on a social networking website."
msgstr ""

#: ../../manuscript/10-scripting.md:161
msgid ""
"Panes are the fun one, represented by the percent sign (%), like the "
"default prompt for csh and tcsh. Hey, makes sense, since panes are "
"pseudoterminals!"
msgstr ""

#: ../../manuscript/10-scripting.md:166
msgid ""
"When scripting tmux, the symbols help denote the type of object, but also"
" serve as a way to target something deeply, such as the pane, directly, "
"without needing to know or specify its window or session."
msgstr ""

#: ../../manuscript/10-scripting.md:170
msgid ""
"Here are some examples of targets, assuming one session named mysession "
"and a client at /dev/ttys004:"
msgstr ""

#: ../../manuscript/10-scripting.md:173
msgid "attach-session [-t target-session]"
msgstr ""

#: ../../manuscript/10-scripting.md:175
msgid "{language=shell, line-numbers=off} $ tmux attach-session -t mysession"
msgstr ""

#: ../../manuscript/10-scripting.md:178
msgid "detach-client [-s target-session] [-t target-client]"
msgstr ""

#: ../../manuscript/10-scripting.md:180
msgid ""
"{language=shell, line-numbers=off} $ tmux detach-client -s mysession -t "
"/dev/ttys004"
msgstr ""

#: ../../manuscript/10-scripting.md:186
msgid "has-session [-t target-session]"
msgstr ""

#: ../../manuscript/10-scripting.md:188
msgid "{language=shell, line-numbers=off} $ tmux has-session -t mysession"
msgstr ""

#: ../../manuscript/10-scripting.md:194
msgid "$ tmux kill-session [-t target-session]"
msgstr ""

#: ../../manuscript/10-scripting.md:196
msgid "{language=shell, line-numbers=off} $ tmux kill-session -t mysession"
msgstr ""

#: ../../manuscript/10-scripting.md:199
msgid "$ tmux list-clients [-t target-session]"
msgstr ""

#: ../../manuscript/10-scripting.md:201
msgid "{language=shell, line-numbers=off} $ tmux list-clients -t mysession"
msgstr ""

#: ../../manuscript/10-scripting.md:204
msgid "$ tmux lock-client [-t target-client]"
msgstr ""

#: ../../manuscript/10-scripting.md:206
msgid "{language=shell, line-numbers=off} $ tmux lock-clients -t /dev/ttys004"
msgstr ""

#: ../../manuscript/10-scripting.md:209
msgid "$ tmux lock-session [-t target-session]"
msgstr ""

#: ../../manuscript/10-scripting.md:211
msgid "{language=shell, line-numbers=off} $ tmux lock-session -t mysession"
msgstr ""

#: ../../manuscript/10-scripting.md:214
msgid "$ tmux new-session [-t target-session]"
msgstr ""

#: ../../manuscript/10-scripting.md:216
msgid "{language=shell, line-numbers=off} $ tmux new-session -t newsession"
msgstr ""

#: ../../manuscript/10-scripting.md:222
msgid "$ tmux refresh-client [-t target-client]"
msgstr ""

#: ../../manuscript/10-scripting.md:224
msgid "{language=shell, line-numbers=off} $ tmux refresh-client -t /dev/ttys004"
msgstr ""

#: ../../manuscript/10-scripting.md:227
msgid "$ tmux rename-session [-t target-session] session-name"
msgstr ""

#: ../../manuscript/10-scripting.md:229
msgid ""
"{language=shell, line-numbers=off} $ tmux rename-session -t mysession "
"renamedsession"
msgstr ""

#: ../../manuscript/10-scripting.md:235
msgid "$ tmux show-messages [-t target-client]"
msgstr ""

#: ../../manuscript/10-scripting.md:237
msgid "{language=shell, line-numbers=off} $ tmux show-messages -t /dev/ttys004"
msgstr ""

#: ../../manuscript/10-scripting.md:240
msgid "$ tmux suspend-client [-t target-client]"
msgstr ""

#: ../../manuscript/10-scripting.md:242
msgid "{language=shell, line-numbers=off} $ tmux suspend-client -t /dev/ttys004"
msgstr ""

#: ../../manuscript/10-scripting.md:251
msgid "$ tmux switch-client [-c target-client] [-t target-session]"
msgstr ""

#: ../../manuscript/10-scripting.md:253
msgid ""
"{language=shell, line-numbers=off} $ tmux suspend-client -c /dev/ttys004 "
"-t othersession"
msgstr ""

#: ../../manuscript/10-scripting.md:259
msgid "Formats {#formats}"
msgstr ""

#: ../../manuscript/10-scripting.md:261
msgid ""
"tmux provides a minimal template language and set of variables to access "
"information about your tmux environment."
msgstr ""

#: ../../manuscript/10-scripting.md:264
msgid "Formats are specified via the -F flag."
msgstr ""

#: ../../manuscript/10-scripting.md:266
msgid ""
"You know how template engines, such as mustache, handlebars ERB in ruby, "
"jinja2 in python, twig in PHP, and JSP in Java, allow template variables?"
" Formats are a similar concept."
msgstr ""

#: ../../manuscript/10-scripting.md:274
msgid ""
"The FORMATS (variables) provided by tmux have expanded greatly since "
"version 1.8. Some of the most commonly used formats as of tmux 2.3 are "
"listed below. See the appendix section on formats for a complete list."
msgstr ""

#: ../../manuscript/10-scripting.md:279
msgid "Let's try to output it:"
msgstr ""

#: ../../manuscript/10-scripting.md:281
msgid ""
"{language=shell, line-numbers=off} $ tmux list-windows -F \"#{window_id} "
"#{window_name}\" > @0 zsh"
msgstr ""

#: ../../manuscript/10-scripting.md:285
msgid ""
"Here's a cool trick to list all panes with the x and y coordinates of the"
" cursor position:"
msgstr ""

#: ../../manuscript/10-scripting.md:288
msgid ""
"{language=shell, line-numbers=off} $ tmux list-panes -F \"#{pane_id} "
"#{pane_current_command} #{pane_current_path} #{cursor_x},#{cursor_y}\" > "
"%0 vim /Users/me/work/tao-of-tmux/manuscript 0,34 %1 tmux /Users/me/work"
"/tao-of-tmux/manuscript 0,17 %2 man /Users/me/work/tao-of-tmux/manuscript"
" 0,0"
msgstr ""

#: ../../manuscript/10-scripting.md:295
msgid "Variables are specific to the objects being listed. For instance:"
msgstr ""

#: ../../manuscript/10-scripting.md:297
msgid ""
"Server-wide variables: host, host_short (no domain name), socket_path, "
"start_time and pid."
msgstr ""

#: ../../manuscript/10-scripting.md:300
msgid ""
"Session-wide variables: session_attached, session_activity, "
"session_created, session_height, session_id, session_name, session_width,"
" session_windows and all server-wide variables."
msgstr ""

#: ../../manuscript/10-scripting.md:304
msgid ""
"Window variables: window_activity, window_active, window_height, "
"window_id, window_index, window_layout, window_name, window_panes, "
"window_width and all session and server variables."
msgstr ""

#: ../../manuscript/10-scripting.md:308
msgid ""
"Pane variables: cursor_x, cursor_y, pane_active, pane_current_command, "
"pane_current_path, pane_height, pane_id, pane_index, pane_width, pane_pid"
" and all window, session and server variables."
msgstr ""

#: ../../manuscript/10-scripting.md:312
msgid ""
"This book focuses on separating the concept of server, sessions, windows,"
" and panes. With the knowledge of targets and formats, this separation "
"takes shape in tmux's internal attributes. If you list-panes all "
"variables up the ladder, including window, session and server variables "
"are available for the panes being listed. Try this:"
msgstr ""

#: ../../manuscript/10-scripting.md:318
msgid ""
"{language=shell, line-numbers=off} $ tmux list-panes -F \"pane: "
"#{pane_id}, window: #{window_id}, session: #{session_id}, server: "
"#{socket_path}\" > pane: %35, window: @13, session: $6, server: "
"/private/tmp/tmux-501/default pane: %38, window: @13, session: $6, "
"server: /private/tmp/tmux-501/default pane: %36, window: @13, session: "
"$6, server: /private/tmp/tmux-501/default"
msgstr ""

#: ../../manuscript/10-scripting.md:325
msgid ""
"Listing windows isn't designed to display variables for pane-specific "
"properties. Since a window is a collection of panes, it can have 1 or "
"more panes open at any time."
msgstr ""

#: ../../manuscript/10-scripting.md:329
msgid ""
"{language=shell, line-numbers=off} $ tmux list-windows -F \"window: "
"#{window_id}, panes: #{window_panes} pane_id: #{pane_id}\" > window: @15,"
" panes: 1 pane_id: %40 window: @13, panes: 3 pane_id: %36 window: @25, "
"panes: 1 pane_id: %50"
msgstr ""

#: ../../manuscript/10-scripting.md:336
msgid ""
"This will show the window ID, prefixed by an @ symbol, and the number of "
"panes inside the window."
msgstr ""

#: ../../manuscript/10-scripting.md:339
msgid ""
"Surprisingly, pane_id shows up via list-windows, as of tmux 2.3. While "
"this output occurs in this version of tmux, it's undefined behavior. It's"
" advised to keep use of -F scoped to the objects being listing when "
"scripting to avoid breakage. For instance, if you want the active pane, "
"use #{pane_active} via $ tmux list-panes -F \"#{pane_active}\"."
msgstr ""

#: ../../manuscript/10-scripting.md:345
msgid ""
"By default, list-panes will only show panes in a window, unless you "
"specify -a to output all on a server or -s [-t session-name] for all "
"panes in a session:"
msgstr ""

#: ../../manuscript/10-scripting.md:349
msgid ""
"{language=shell, line-numbers=off} $ tmux list-panes -s -t mysession > "
"1.0: [176x29] [history 87/2000, 21033 bytes] %0 1.1: [87x6] [history "
"1814/2000, 408479 bytes] %1 (active) 1.2: [88x6] [history 1916/2000, "
"464932 bytes] %2 2.0: [176x24] [history 9/2000, 2262 bytes] %13 2.1: "
"[55x11] [history 55/2000, 7395 bytes] %14"
msgstr ""

#: ../../manuscript/10-scripting.md:357
msgid "And the -t flag lists all panes in a window:"
msgstr ""

#: ../../manuscript/10-scripting.md:359
msgid ""
"{language=shell, line-numbers=off} $ tmux list-panes -t @0 > 0: [176x29] "
"[history 87/2000, 21033 bytes] %0 1: [176x36] [history 1790/2000, 407807 "
"bytes] %1 (active) 2: [88x6] [history 1916/2000, 464932 bytes] %2"
msgstr ""

#: ../../manuscript/10-scripting.md:365
msgid ""
"The same concept applies to list-windows. By default, The -a flag will "
"list all windows on a server, -t lists windows within a session, and "
"omitting -t will only list windows within the current session inside "
"tmux."
msgstr ""

#: ../../manuscript/10-scripting.md:369
msgid ""
"{language=shell, line-numbers=off} $ tmux list-windows > 1: zsh* (3 "
"panes) [176x36] [layout "
"f9a4,176x36,0,0[176x29,0,0,0,176x6,0,30{87x6,0,30,1,88x6,88,30,2}]] @0 "
"(active) 2: zsh- (5 panes) [176x36] [layout "
"55ef,176x36,0,0[176x24,0,0,13,176x11,0,25{55x11,0,25,14,58x11,56,25[58x7,56,25,16,58x3,56,33,17],61x11,115,25,15}]]"
" @6"
msgstr ""

#: ../../manuscript/10-scripting.md:374
msgid "Controlling tmux {#send-keys}"
msgstr ""

#: ../../manuscript/10-scripting.md:376
msgid ""
"tmux allows sending keys, including Ctrl via C- or ^, alt (Meta) via M-, "
"and special key names. Here's a list of special keys straight from the "
"manual:"
msgstr ""

#: ../../manuscript/10-scripting.md:379
msgid ""
"Up, Down, Left, Right, BSpace, BTab, DC (Delete), End, Enter, Escape, F1 "
"to F12, Home, IC (Insert), NPage/PageDown/PgDn, PPage/PageUp/PgUp, Space,"
" and Tab."
msgstr ""

#: ../../manuscript/10-scripting.md:383
msgid ""
"If special keys are not matched, the defined behavior is to send it as a "
"string to the pane, character by character."
msgstr ""

#: ../../manuscript/10-scripting.md:386
msgid ""
"For this example, we will use send-keys through tmux prompt, because "
"omitting target (-t) will direct the command to the current pane, but the"
" keys sent will sometimes print before the prompt."
msgstr ""

#: ../../manuscript/10-scripting.md:390
msgid "Open tmux command prompt via Prefix + : and type this after the ::"
msgstr ""

#: ../../manuscript/10-scripting.md:392
msgid "send-keys echo 'hi'"
msgstr ""

#: ../../manuscript/10-scripting.md:394
msgid ""
"Hit enter. This inserted hi into the current active pane. You can also "
"use targets to specify which pane to send it to."
msgstr ""

#: ../../manuscript/10-scripting.md:397
msgid ""
"Let's now try to send keys to another pane in our current window. Create "
"a second pane via splitting the window if one doesn't exist. You can also"
" do this exercise outside of tmux or inside a scripting file and running "
"it."
msgstr ""

#: ../../manuscript/10-scripting.md:401
msgid "Grab a pane ID from the output of list-panes:"
msgstr ""

#: ../../manuscript/10-scripting.md:403
msgid ""
"{language=shell, line-numbers=off} $ tmux list-panes > 0: [180x57] "
"[history 87/2000, 21033 bytes] %0 1: [89x14] [history 1884/2000, 509864 "
"bytes] %1 (active) 2: [90x14] [history 1853/2000, 465297 bytes] %2"
msgstr ""

#: ../../manuscript/10-scripting.md:409
msgid ""
"%2 looks good. Replace %2 with the pane you want to target. This sends "
"cal to the input:"
msgstr ""

#: ../../manuscript/10-scripting.md:412
msgid "{language=shell, line-numbers=off} $ tmux send-keys -t %2 'cal'"
msgstr ""

#: ../../manuscript/10-scripting.md:415
msgid "Nice, let's cancel that out by sending a SIGINT:"
msgstr ""

#: ../../manuscript/10-scripting.md:417
msgid "{language=shell, line-numbers=off} $ tmux send-keys -t %2 'C-c'"
msgstr ""

#: ../../manuscript/10-scripting.md:420
msgid ""
"This cancelled the command and brought up a fresh input. This time, let's"
" send an Enter keypress to run cal(1)."
msgstr ""

#: ../../manuscript/10-scripting.md:423
msgid "{language=shell, line-numbers=off} $ tmux send-keys -t %2 'cal' 'Enter'"
msgstr ""

#: ../../manuscript/10-scripting.md:426
msgid "This outputs in the adjacent pane."
msgstr ""

#: ../../manuscript/10-scripting.md:431
msgid "Capturing pane content {#capture-pane}"
msgstr ""

#: ../../manuscript/10-scripting.md:433
msgid "$ tmux capture-pane will copy a panes' contents."
msgstr ""

#: ../../manuscript/10-scripting.md:435
msgid ""
"By default, the contents will be saved to tmux's internal clipboard, the "
"paste buffer. You can run capture-pane within any pane, then navigate to "
"an editor, paste the contents (don't forget to :set paste and go into "
"insert mode with i in vim), and save it to a file. To paste, use Prefix +"
" ] inside the pane you're pasting into."
msgstr ""

#: ../../manuscript/10-scripting.md:441
msgid ""
"You can also add the -p flag to print it to stdout. From there, you could"
" use redirection to place the output into a file. Let's do >> so we don't"
" accidentally truncate a file:"
msgstr ""

#: ../../manuscript/10-scripting.md:446
msgid "{language=shell, line-numbers=off} $ tmux capture-pane -p >> ./test"
msgstr ""

#: ../../manuscript/10-scripting.md:449
msgid ""
"As an alternative to redirection, you can also use save-buffer. The -a "
"flag will get you the same behavior as appended output direction."
msgstr ""

#: ../../manuscript/10-scripting.md:452
msgid "{language=shell, line-numbers=off} $ tmux save-buffer -a ./test"
msgstr ""

#: ../../manuscript/10-scripting.md:455
msgid "To check what's inside:"
msgstr ""

#: ../../manuscript/10-scripting.md:457
msgid "{language=shell, line-numbers=off} $ cat ./test"
msgstr ""

#: ../../manuscript/10-scripting.md:460
msgid ""
"Like with send-keys, targets can be specified with -t. Let's copy a pane "
"into tmux's clipboard (\"paste buffer\") and paste it into a text editor "
"in a third pane:"
msgstr ""

#: ../../manuscript/10-scripting.md:467
msgid ""
"Remember, you can also copy, paste, and send-keys to other windows and "
"sessions also. Targets are server-wide."
msgstr ""

#: ../../manuscript/10-scripting.md:472
msgid ""
"tmux has a well-devised and intuitive command system, enabling the user "
"to access  bread and butter functionality quickly. At the same time, tmux"
" provides a powerful way of retrieving information on its objects between"
" list-panes, list-windows and list-sessions and formats. This makes tmux "
"not only accessible and configurable, but also scriptable."
msgstr ""

#: ../../manuscript/10-scripting.md:478
msgid ""
"The ability to retrieve explicitly and reliably, from a session down to a"
" pane. All it takes is a pane's ID to capture its contents or even send "
"it keys. Used by the skilled programmer, scripting tmux can facilitate "
"orchestrating terminals in ways previously deemed unrealistic; anything "
"from niche shell scripts to monitor and react to behavior on systems to "
"high-level, intelligent and structured control via object oriented "
"libraries, like libtmux."
msgstr ""

#: ../../manuscript/10-scripting.md:486
msgid ""
"In the next chapter, we delve into optimizations that showcase the latest"
" generation of unix tools that build upon old, time-tested concepts, like"
" man pages and piping, while maintaining portability across differences "
"in platforms and graceful degradation to ensure development tooling works"
" on machines missing optional tools. Also, the chapter will introduce "
"session managers, a powerful, high-level tool leveraging tmux's scripting"
" capabilities to consistently load workspace via a declarative "
"configuration."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:1
msgid "Tips and tricks {#tips-and-tricks}"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:3
msgid "Read the tmux manual in style"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:5
msgid ""
"$ man tmux is the command to load up the man page for tmux. You can do "
"the same to find instructions for any command or entity with a manpage "
"entry; here are some fun ones:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:9
msgid "{language=shell, line-numbers=off} $ man less $ man man $ man strftime"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:14
msgid ""
"most(1), a solid PAGER, drastically improves readability of manual pages "
"by acting as a syntax highlighter."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:20
msgid ""
"To get this working, you need to set your PAGER environmental variable to"
" point to the MOST binary. You can test it like this:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:23
msgid "{language=shell, line-numbers=off} $ PAGER=most man ls"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:26
msgid ""
"If you found you like most, you'll probably want to make it your default "
"manpage reader. You can do this by setting an environmental variable in "
"your \"rc\" (Run Commands) for your shell. The location of the file "
"depends on your shell. You can use $ echo $SHELL to find it on most "
"shells). In Bash and zsh, these are kept in ~/.bashrc or ~/.zshrc, "
"respectively:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:33
msgid "{language=shell, line-numbers=off} export PAGER=\"most\""
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:36
msgid ""
"I often reuse my configurations across machines, and some of them may not"
" have most installed, so I will have my scripting only set PAGER if most "
"is found:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:40
msgid "{language=shell, line-numbers=off} #!/bin/sh"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:47
msgid "Save this in a file, for example, to ~/.dot-config/most.sh."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:49
msgid "Then you can source it in via your main rc file."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:52
msgid "{language=shell, line-numbers=off} source $HOME/.dot-config/most.sh"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:55
msgid ""
"Patterns like these help make your dot-configs portable, cross-platform, "
"and modular. For inspiration, you can fork, copy, and paste from my "
"permissively- licensed config at https://github.com/tony/.dot-config."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:59
msgid "Log tailing"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:61
msgid ""
"Not tmux specific, but powerful when used in tandem with it, you can run "
"a follow (-f) using tail(1). More modern versions of tail have the -F "
"(capitalized), which checks for file renames and rotation."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:66
msgid "On OS X, you can do:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:68
msgid "{language=shell, line-numbers=off} $ tail -F /var/log/system.log"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:71
msgid ""
"and keep it running in a pane while log messages come in. It's like "
"Facebook newsfeed for your system, except for programmers and system "
"administrators."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:75
msgid ""
"For monitoring logs, multitail provides a terminal-friendly solution. "
"It'd be an Inception moment, because you'd be using a log multiplexer in "
"a terminal multiplexer."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:79
msgid "File watching {#file-watching}"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:81
msgid ""
"In my never-ending conquest to get software projects working in symphony "
"with code changes, I've come to test many file watching applications and "
"patterns. Pursuing the holy grail feedback loop upon file changes, I've "
"gradually become the internet's unofficial connoisseur on them."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:86
msgid ""
"File watcher applications wait for a file to be updated, then execute a "
"custom command, such as restarting a server, rebuilding an application, "
"running tests, linters, and so on. It gives you, as a developer, instant "
"feedback in the terminal, empowering a tmux workspace to have IDE-like "
"features, without the bloat, memory, and CPU fans roaring."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:92
msgid ""
"I eventually settled on entr(1), which works superbly across Linux "
"distros, BSDs and OS X / macOS."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:95
msgid "The trick to make entr work is to pipe a list of files into it to watch."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:98
msgid ""
"Let's search for all .go files in a directory and run tests on file "
"change:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:102
msgid "{language=shell, line-numbers=off} $ ls -d *.go | entr -c go test ./..."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:105
msgid ""
"Sometimes, we may want to watch files recursively, but we need it to run "
"reliably across systems. We can't depend on ** existing to grab files "
"recursively, since it's not portable. Something more POSIX-friendly would"
" be find . -print | grep -i '.*[.]go':"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:110
msgid ""
"{language=shell, line-numbers=off} $ find . -print | grep -i '.*[.]go' | "
"entr -c go test ./..."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:113
msgid ""
"To only run file watcher if entr is installed, let's wrap in a "
"conditional command -v test:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:117
msgid ""
"{language=shell, line-numbers=off} $ if command -v entr > /dev/null; then"
" find . -print | grep -i '.*[.]go' | entr -c go test ./...; fi"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:121
msgid ""
"And have it fallback to go test in the event entr isn't installed. This "
"allows your command to degrade gracefully. You'll thank me when you use "
"this snippet in conjunction with a session manager:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:125
msgid ""
"{language=shell, line-numbers=off} $ if command -v entr > /dev/null; then"
" find . -print | grep -i '.*[.]go' | entr -c go test ./...; else go test "
"./...; fi"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:129
msgid ""
"If the project is a team or open source project, where a user never used "
"the command before and could be missing a required software package, we "
"can give a helpful message. This shows a notice to the user to install "
"entr if not installed on the system:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:134
msgid ""
"{language=shell, line-numbers=off} $ if command -v entr > /dev/null; then"
" find . -print | grep -i '.*[.]go' | entr -c go test ./...; else go test "
"./...; echo \"\\nInstall entr(1) to \" echo \"run tasks when files "
"change. \\nSee http://entrproject.org/\"; fi"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:139
msgid ""
"Here's why you want patterns like above: You can put it into a Makefile "
"and commit it to your project's VCS, so you and other developers can have"
" access to this reusable command across different UNIX-like systems, with"
" and without certain programs installed."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:144
msgid ""
"Note: You may have to convert the indentation within the Makefiles from "
"spaces to tabs."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:147
msgid "Let's see what a Makefile with this looks like:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:149
msgid ""
"{language=makefile, line-numbers=off} watch_test: if command -v entr > "
"/dev/null; then find . -print | grep -i '.*[.]go' | entr -c go test "
"./...; else go test ./...; echo \"\\nInstall entr(1) to run tasks when "
"files change. \\nSee http://entrproject.org/\"; fi"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:153
msgid "To run this, do $ make watch_test in the same directory as the Makefile."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:155
msgid ""
"But it's still a tad bloated and hard to read. We have a couple tricks at"
" our disposal. One would be to add continuation to the next line with a "
"trailing backslash (\\):"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:159
msgid ""
"{language=makefile, line-numbers=off} watch_test: if command -v entr > "
"/dev/null; then find . -print | grep -i '.*[.]go' | entr -c go test "
"./...; else go test ./...; echo \"\\nInstall entr(1) to run tasks on file"
" change. \\n\"; echo \"See http://entrproject.org/\"; fi"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:167
msgid ""
"Another would be to break the command into variables and make "
"subcommands. So:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:169
msgid ""
"{language=makefile, line-numbers=off} WATCH_FILES= find . -type f -not "
"-path '/.' | grep -i '.*[.]go$$' 2> /dev/null"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:188
msgid ""
"$(MAKE) is used for portability. One reason is recursive calls, such as "
"here. On BSD systems, you may try invoking make via gmake (to call GNU "
"Make specifically). This happened to me, while building PDFs for the book"
" AlgoXY. I had to write a patch to make it properly use $(MAKE) for "
"recursive calls."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:195
msgid ""
"The $(test) after go test allows passing a shell variable with arguments "
"in it. So, you could do make watch_test test='-i'. For examples of a "
"similar Makefile in action, see the one in my tmuxp project. The project "
"is licensed BSD (permissive), so you can grab code and use it in "
"compliance with the LICENSE."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:201
msgid ""
"One more thing, let's say you're running a server, like Gin, Iris, or "
"Echo. entr -c likely won't be restarting the server for you. Try entering"
" the -r flag to send a SIGTERM to the process before restarting it. "
"Combining the current -c flag with the new -r will give you entr -rc:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:208
msgid "{language=makefile, line-numbers=off} run: go run main.go"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:216
msgid "Session Managers {#session-manager}"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:218
msgid ""
"For those who use tmux regularly to perform repetitive tasks, such as "
"opening the same software project, viewing the same logs, etc., frequent "
"tasks will often lead to the creation of tmux scripts."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:222
msgid ""
"A user can use plain shell scripting to build their tmux sessions. "
"However, scripting is error prone, hard to debug, and requires tmux to "
"split windows into panes in a certain order. In addition, there's the "
"burden of assuring the shell scripts are portable."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:227
msgid ""
"A declarative configuration in YAML or JSON configuration abstracts out "
"the commands, layout, and options of tmux. It prevents the mistakes and "
"repetition scripting entails. These applications are called tmux session "
"managers, and in different ways, they programmatically create tmux "
"workspaces by running a series of commands based on a config."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:233
msgid ""
"Teamocil and Tmuxinator are the first ones I tried. By far, the most "
"popular one is tmuxinator. They are both programmed in Ruby. There's also"
" tmuxomatic, where you can \"draw\" your tmux sessions in text and have "
"tmuxomatic build the layout."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:239
msgid ""
"I sort of have a home team advantage here, as I'm author of tmuxp. "
"Already having used teamocil and tmuxinator, I wrote my own in python "
"instead of ruby, with many more features. For one, it builds on top of "
"libtmux, a library which abstracts tmux server, sessions, windows and "
"panes to build the state of tmux sessions. In addition, it has a naive "
"form of session freezing, support for JSON, more flexible configuration "
"options, and it will even offer to attach exiting sessions, instead of "
"redundantly running script commands against the session if it's already "
"running."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:249
msgid ""
"So, in tmuxp, we'll hollow out a tmuxp config directory with $ mkdir "
"~/.tmuxp then create a YAML file at ~/.tmuxp/test.yaml:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:252
msgid ""
"{language=yaml, line-numbers=off} session_name: 4-pane-split windows: - "
"window_name: dev window layout: tiled shell_command_before: - cd ~/"
"                    # run as a first command in all panes panes: - "
"shell_command:           # pane no. 1 - cd /var/log          # run "
"multiple commands in this pane - ls -al | grep .log - echo second pane"
"         # pane no. 2 - echo third pane          # pane no. 3 - echo "
"forth pane          # pane no. 4"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:267
msgid ""
"gives a session titled 4-pane-split, with one window titled dev window "
"with 4 panes in it. 3 in the home directory; the other is in /var/log and"
" is printing a list of all files ending with .log."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:271
msgid "To launch it, install tmuxp and load the configuration:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:273
msgid ""
"{language=shell, line-numbers=off} $ pip install --user tmuxp $ tmuxp -V"
"   # verify tmuxp is installed, if not you need to fix your PATH # to "
"point to your python bin folder. More help below. $ tmuxp load "
"~/.tmuxp/test.yaml"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:279
msgid ""
"If tmuxp isn't found, there is a troubleshooting entry on fixing your "
"paths in the appendix."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:282
msgid "More code and examples {#example-projects}"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:284
msgid ""
"I've dusted off a C++ space shooter and a new go webapp I've been playing"
" with. They're licensed under MIT so, you can use them, copy and paste "
"from them, etc:"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:287
msgid ""
"C++14 space shooter minigame - side scrolling shmup demo (sdl2, cmake, "
"json resource manifests, Linux/BSD/OS X compatible)"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:290
msgid ""
"Go tmux web frontend - display current tmux session and window "
"information via browser (gin, bower)"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:294
msgid ""
"Both support tmuxp load . within the project directory to load up the "
"project."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:296
msgid "Make sure to install entr(1) beforehand!"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:298
msgid "tmux-plugins and tpm"
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:300
msgid ""
"tmux-plugins and tmux package manager are a suite of tools dedicated to "
"enhancing the experience of tmux users."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:304
msgid "tmux-resurrect: Persists tmux environment across system restarts."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:306
msgid ""
"tmux-continuum: Continuous saving of tmux environment. Automatic restore "
"when tmux is started. Automatic tmux start when computer is turned on."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:309
msgid ""
"tmux-yank: Tmux plugin for copying to system clipboard. Works on OSX, "
"Linux and Cygwin."
msgstr ""

#: ../../manuscript/11-tips-and-tricks.md:311
msgid ""
"tmux-battery: Plug and play battery percentage and icon indicator for "
"Tmux."
msgstr ""

#: ../../manuscript/12-takeaway.md:1
msgid "Takeaway {#takeaway}"
msgstr ""

#: ../../manuscript/12-takeaway.md:3
msgid ""
"In this book, we've taken an organized approach to understanding tmux. As"
" you use tmux more and more, continue to come back and use this resource "
"to help wrap your brain around concepts. You do not have to understand "
"the intricacies of tmux, let alone the terminal, in a single sitting. "
"Acclimation happens over time."
msgstr ""

#: ../../manuscript/12-takeaway.md:9
msgid ""
"tmux's userbase varies in skill level. Some readers of this book may have"
" just learned how to use the Prefix key yesterday. Others are looking to "
"tweak their configurations and host it in their \"dot files\" on github. "
"There also exists a very clever hacker who utilizes the advanced "
"scripting capabilities tmux offers to pilot the terminal in ways "
"previously thought impossible."
msgstr ""

#: ../../manuscript/12-takeaway.md:15
msgid ""
"We've covered the server, session, window, and pane concepts. Panes are "
"shells, AKA pseudoterminals or PTYs. The command system. That "
"configuration is basically a file filled with commands. An overview of "
"the target system lets you specify objects to interact with tmux "
"commands. A breeze through formats, a template system with variables to "
"retrieve information on tmux's current state. How to send keystrokes and "
"copy from tmux panes programmatically. A lot of terminal tricks that work"
" across platforms and well with tmux, including a file watching workflow "
"to run linting, testing, and build commands on file changes. Two "
"permissively licensed open source projects for demonstration. A tmux "
"configuration you can copy and paste from. An object oriented tmux API "
"wrapper and a tmux session manager."
msgstr ""

#: ../../manuscript/12-takeaway.md:29
msgid ""
"If you liked this book, please leave a review on Amazon and Goodreads. I "
"would also appreciate you leaving something in my tip jar. I am an "
"independent software developer and could use all the help I can get."
msgstr ""

#: ../../manuscript/12-takeaway.md:34
msgid ""
"If you found an error or have a suggestion, please contact me at "
"tao.of.tmux@git-pull.com. I want this book to be the best it can be. If "
"you are having technical difficulties with Kindle, please send me your "
"receipt and I will comp you a leanpub coupon."
msgstr ""

#: ../../manuscript/99-cheatsheets.md:1
msgid "{backmatter}"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:3
msgid "Appendix: Cheatsheets {#appendix-cheatsheets}"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:5
msgid ""
"These are taken directly from tmux's manual pages, tabled and organized "
"by hand into sections for convenience."
msgstr ""

#: ../../manuscript/99-cheatsheets.md:8 ../../manuscript/99-cheatsheets.md:344
msgid "Commands"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:10 ../../manuscript/99-cheatsheets.md:109
msgid "Session"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:12
msgid ""
"{width=\"wide\"} | Command          | Action"
"                                                   | "
"|------------------|----------------------------------------------------------|"
" | no command       | Short-cut for new-session"
"                              | | attach-session | Attach or switch to a "
"session                            | | choose-session | Put a window into"
" session choice mode                    | | has-session    | Check and "
"report if a session exists on the server       | | kill-session   | "
"Destroy a given session                                  | | list-"
"sessions  | List sessions managed by server                          | | "
"lock-session   | Lock all clients attached to a session"
"                   | | new-session    | Create a new session"
"                                     | | rename-session | Rename a "
"session                                         |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:25 ../../manuscript/99-cheatsheets.md:128
msgid "Window"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:27
msgid ""
"{width=\"wide\"} | Command              | Action"
"                                               | "
"|----------------------|------------------------------------------------------|"
" | choose-window      | Put a window into window choice"
"                      | | find-window        | Search for a pattern in "
"windows                      | | kill-window        | Destroy a given "
"window                               | | last-window        | Select the "
"previously selected                       | | link-window        | Link a"
" window to another                             | | list-windows       | "
"List windows of a session                            | | move-window"
"        | Move a window to another                             | | new-"
"window         | Create a new window                                  | |"
" next-window        | Move to the next window in a sesssion"
"                | | previous-window    | Move to the previous window in "
"session               | | rename-window      | Rename a window"
"                                      | | respawn-window     | Reuse a "
"window in which a command has exited         | | rotate-window      | "
"Rotate positions of panes in a window                | | select-window"
"      | Select a window                                      | | set-"
"window-option  | Set a window option                                  | |"
" show-window-options| Show window options"
"                                  | | split-window       | Splits a pane "
"into two                               | | swap-window        | Swap two "
"windows                                     | | unlink-window      | "
"Unlink a window                                      |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:50 ../../manuscript/99-cheatsheets.md:163
msgid "Pane"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:52
msgid ""
"{width=\"wide\"} | Command         | Action"
"                                                    | "
"|-----------------|-----------------------------------------------------------|"
" | break-pane    | Break a pane from an existing into a new window"
"           | | capture-pane  | Capture the contents of a pane to a buffer"
"                | | display-panes | Display an indicator for each visible"
" pane                | | join-pane     | Split a pane and move an "
"existing one into the new space  | | kill-pane     | Destroy a given pane"
"                                      | | last-pane     | Select the "
"previously selected pane                       | | list-panes    | List "
"panes of a window                                    | | move-pane     | "
"Move a pane into a new space                              | | pipe-pane"
"     | Pipe output from a pane to a shell command                | | "
"resize-pane   | Resize a pane"
"                                             | | respawn-pane  | Reuse a "
"pane in which a command has exited                | | select-pane   | "
"Make a pane the active one in the window                  | | swap-pane"
"     | Swap two panes                                            |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:73
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |C-b             | Send the prefix key (C-b) through to the           | "
"|                  | application.                                       |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:79
msgid "Miscellaneous"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:81
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |C-z             | Suspend the tmux client.                           | "
"|r               | Force redraw of the attached client.               | "
"|t               | Show the time.                                     | "
"|~               | Show previous messages from tmux, if any.          | "
"|f               | Prompt to search for text in open windows.         | "
"|d               | Detach the current client.                         | "
"|D               | Choose a client to detach.                         | "
"|?               | List all key bindings.                             | "
"|:               | Enter the tmux command prompt.                     |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:94
msgid "Copy/Paste"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:96
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |#               | List all paste buffers.                            | "
"|[               | Enter copy mode to copy text or view the history.  | "
"|]               | Paste the most recently copied buffer of text.     | "
"|Page Up         | Enter copy mode and scroll one page up.            | "
"|=               | Choose which buffer to paste interactively from a  | |"
"                  | list.                                              | "
"|-               | Delete the most recently copied buffer of text.    |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:111
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |               | Rename the current session.                        |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:116
msgid "Session Traversal"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:118
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |L               | Switch the attached client back to the last        | "
"|                  | session.                                           |"
" |s               | Select a new session for the attached client       | "
"|                  | interactively.                                     |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:130
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |c               | Create a new window.                               | "
"|&               | Kill the current window.                           | "
"|i               | Display some information about the current window. | "
"|,               | Rename the current window.                         |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:138
msgid "Window Traversal"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:140
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |0 to 9          | Select windows 0 to 9.                             | "
"|w               | Choose the current window interactively.           | "
"|M-n             | Move to the next window with a bell or activity    | |"
"                  | marker.                                            | "
"|M-p             | Move to the previous window with a bell or activity| |"
"                  | marker.                                            | "
"|p               | Change to the previous window.                     | "
"|n               | Change to the next window.                         | "
"|l               | Move to the previously selected window.            | "
"|'               | Prompt for a window index to select.               |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:154
msgid "Window Moving"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:156
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |.               | Prompt for an index to move the current window     |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:165
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |x               | Kill the current pane.                             | "
"|q               | Briefly display pane indexes.                      | "
"|%               | Split the current pane into two, left and right.   | "
"|\"               | Split the current pane into two, top and bottom.   |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:173
msgid "Pane Traversal"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:175
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |;               | Move to the previously active pane.                | "
"|Up, Down        | Change to the pane above, below, to the left, or to| "
"|Left, Right     | the right of the current pane.                     | "
"|o               | Select the next pane in the current window.        |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:183
msgid "Pane Moving"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:185
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |C-o             | Rotate the panes in the current window forwards.   | "
"|M-o             | Rotate the panes in the current window backwards.  | "
"|{               | Swap the current pane with the previous pane.      | "
"|}               | Swap the current pane with the next pane.          | "
"|!               | Break the current pane out of the window.          |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:194
msgid "Pane Resizing"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:196
msgid ""
"{width=\"wide\"} | Shortcut         | Action"
"                                             | "
"|------------------|----------------------------------------------------|"
" |M-1 to M-5      | Arrange panes in one of the five preset layouts:   | "
"|                  | even-horizontal, even-vertical, main-horizontal,   |"
" |                  | main-vertical, or tiled.                           "
"| |C-Up, C-Down    | Resize the current pane in steps of one cell.      |"
" |C-Left, C-Right |                                                    | "
"|M-Up, M-Down    | Resize the current pane in steps of five cells.    | "
"|M-Left, M-Right |                                                    |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:209
msgid "Formats {#appendix-formats}"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:211
msgid "Copy / paste"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:213
msgid ""
"{width=\"wide\"} | Variable name         | Description"
"                              | "
"|-----------------------|------------------------------------------| | "
"buffer_name           |Name of buffer                            | | "
"buffer_sample         |Sample of start of buffer                 | | "
"buffer_size           |Size of the specified buffer in bytes     |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:222
msgid ""
"{width=\"wide\"} | Variable name         | Description"
"                              | "
"|-----------------------|------------------------------------------| | "
"client_activity       |Integer time client last had activity     | | "
"client_created        |Integer time client created               | | "
"client_control_mode   |1 if client is in control mode            | | "
"client_height         |Height of client                          | | "
"client_key_table      |Current key table                         | | "
"client_last_session   |Name of the client's last session         | | "
"client_pid            |PID of client process                     | | "
"client_prefix         |1 if prefix key has been pressed          | | "
"client_readonly       |1 if client is readonly                   | | "
"client_session        |Name of the client's session              | | "
"client_termname       |Terminal name of client                   | | "
"client_tty            |Pseudo terminal of client                 | | "
"client_utf8           |1 if client supports utf8                 | | "
"client_width          |Width of client                           | | line"
"                  |Line number in the list                   |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:241
msgid "Panes"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:243
msgid ""
"{width=\"wide\"} | Variable name         | Description"
"                              | "
"|-----------------------|------------------------------------------| | "
"alternate_on          |If pane is in alternate screen            | | "
"alternate_saved_x     |Saved cursor X in alternate screen        | | "
"alternate_saved_y     |Saved cursor Y in alternate screen        | | "
"cursor_flag           |Pane cursor flag                          | | "
"cursor_x              |Cursor X position in pane                 | | "
"cursor_y              |Cursor Y position in pane                 | | "
"insert_flag           |Pane insert flag                          | | "
"keypad_cursor_flag    |Pane keypad cursor flag                   | | "
"keypad_flag           |Pane keypad flag                          | | "
"mouse_any_flag        |Pane mouse any flag                       | | "
"mouse_button_flag     |Pane mouse button flag                    | | "
"mouse_standard_flag   |Pane mouse standard flag                  | | "
"pane_active           |1 if active pane                          | | "
"pane_bottom           |Bottom of pane                            | | "
"pane_current_command  |Current command if available              | | "
"pane_current_path     |Current path if available                 | | "
"pane_dead             |1 if pane is dead                         | | "
"pane_dead_status      |Exit status of process in dead pane       | | "
"pane_height           |Height of pane                            | | "
"pane_id               |Unique pane ID (Alias: #D)                | | "
"pane_in_mode          |If pane is in a mode                      | | "
"pane_input_off        |If input to pane is disabled              | | "
"pane_index            |Index of pane (Alias: #P)                 | | "
"pane_left             |Left of pane                              | | "
"pane_pid              |PID of first process in pane              | | "
"pane_right            |Right of pane                             | | "
"pane_start_command    |Command pane started with                 | | "
"pane_synchronized     |If pane is synchronized                   | | "
"pane_tabs             |Pane tab positions                        | | "
"pane_title            |Title of pane (Alias: #T)                 | | "
"pane_top              |Top of pane                               | | "
"pane_tty              |Pseudo terminal of pane                   | | "
"pane_width            |Width of pane                             | | "
"scroll_region_lower   |Bottom of scroll region in pane           | | "
"scroll_region_upper   |Top of scroll region in pane              | | "
"scroll_position       |Scroll position in copy mode              | | "
"wrap_flag             |Pane wrap flag                            |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:284
msgid "Sessions"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:286
msgid ""
"{width=\"wide\"} | Variable name         | Description"
"                              | "
"|-----------------------|------------------------------------------| | "
"session_alerts        |List of window indexes with alerts        | | "
"session_attached      |Number of clients session is attached to  | | "
"session_activity      |Integer time of session last activity     | | "
"session_created       |Integer time session created              | | "
"session_last_attached |Integer time session last attached        | | "
"session_group         |Number of session group                   | | "
"session_grouped       |1 if session in a group                   | | "
"session_height        |Height of session                         | | "
"session_id            |Unique session ID                         | | "
"session_many_attached |1 if multiple clients attached            | | "
"session_name          |Name of session (Alias: #S)               | | "
"session_width         |Width of session                          | | "
"session_windows       |Number of windows in session              |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:303
msgid "Windows"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:305
msgid ""
"{width=\"wide\"} | Variable name         | Description"
"                              | "
"|-----------------------|------------------------------------------| | "
"history_bytes         |Number of bytes in window history         | | "
"history_limit         |Maximum window history lines              | | "
"history_size          |Size of history in bytes                  | | "
"window_activity       |Integer time of window last activity      | | "
"window_activity_flag  |1 if window has activity                  | | "
"window_active         |1 if window active                        | | "
"window_bell_flag      |1 if window has bell                      | | "
"window_find_matches   |Matched data from the find-window         | | "
"window_flags          |Window flags (Alias: #F)                  | | "
"window_height         |Height of window                          | | "
"window_id             |Unique window ID                          | | "
"window_index          |Index of window (Alias: #I)               | | "
"window_last_flag      |1 if window is the last used              | | "
"window_layout         |Window layout description, ignoring zoomed| |"
"                       |window panes                              | | "
"window_linked         |1 if window is linked across sessions     | | "
"window_name           |Name of window (Alias: #W)                | | "
"window_panes          |Number of panes in window                 | | "
"window_silence_flag   |1 if window has silence alert             | | "
"window_visible_layout |Window layout description, respecting     | |"
"                       |zoomed window panes                       | | "
"window_width          |Width of window                           | | "
"window_zoomed_flag    |1 if window is zoomed                     |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:332
msgid "Servers"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:334
msgid ""
"{width=\"wide\"} | Variable name         | Description"
"                              | "
"|-----------------------|------------------------------------------| | "
"host                  |Hostname of local host (alias: #H)        | | "
"host_short            |Hostname of local host (no domain name)   | |"
"                       |(alias: #h)                               | | "
"socket_path           |Server socket path                        | | "
"start_time            |Server start time                         | | pid"
"                   |Server PID                                |"
msgstr ""

#: ../../manuscript/99-cheatsheets.md:346
msgid "For $ tmux list-commands."
msgstr ""

#: ../../manuscript/99-cheatsheets.md:348
msgid ""
"{width=\"wide\"} | Variable name         | Description"
"                              | "
"|-----------------------|------------------------------------------| | "
"command_hooked        |Name of command hooked, if any            | | "
"command_name          |Name of command in use, if any            | | "
"command_list_name     |Command name if listing commands          | | "
"command_list_alias    |Command alias if listing commands         | | "
"command_list_usage    |Command usage if listing commands         |"
msgstr ""

#: ../../manuscript/99-installation.md:1
msgid "Appendix: Installing tmux {#appendix-installation}"
msgstr ""

#: ../../manuscript/99-installation.md:3
msgid "macOS / OS X"
msgstr ""

#: ../../manuscript/99-installation.md:5
msgid "brew"
msgstr ""

#: ../../manuscript/99-installation.md:7
msgid "{language=shell, line-numbers=off} $ brew install tmux"
msgstr ""

#: ../../manuscript/99-installation.md:10
msgid "macports"
msgstr ""

#: ../../manuscript/99-installation.md:12
msgid "{language=shell, line-numbers=off} $ sudo port install tmux"
msgstr ""

#: ../../manuscript/99-installation.md:15
msgid "fink"
msgstr ""

#: ../../manuscript/99-installation.md:17
msgid "{language=shell, line-numbers=off} $ fink install tmux"
msgstr ""

#: ../../manuscript/99-installation.md:20
msgid "Linux"
msgstr ""

#: ../../manuscript/99-installation.md:22
msgid "Ubuntu / Mint / Debian, etc."
msgstr ""

#: ../../manuscript/99-installation.md:24
msgid "{language=shell, line-numbers=off} $ sudo apt-get install tmux"
msgstr ""

#: ../../manuscript/99-installation.md:27
msgid "CentOS / Fedora / Redhat, etc."
msgstr ""

#: ../../manuscript/99-installation.md:29
msgid "{language=shell, line-numbers=off} $ sudo yum install tmux"
msgstr ""

#: ../../manuscript/99-installation.md:32
msgid "Arch Linux (pacman)"
msgstr ""

#: ../../manuscript/99-installation.md:34
msgid "{language=shell, line-numbers=off} $ sudo pacman -S tmux"
msgstr ""

#: ../../manuscript/99-installation.md:37
msgid "Gentoo (portage)"
msgstr ""

#: ../../manuscript/99-installation.md:39
msgid "{language=shell, line-numbers=off} $ sudo emerge --ask app-misc/tmux"
msgstr ""

#: ../../manuscript/99-installation.md:42
msgid "BSD"
msgstr ""

#: ../../manuscript/99-installation.md:44
msgid "FreeBSD"
msgstr ""

#: ../../manuscript/99-installation.md:46
msgid "pkg(1)"
msgstr ""

#: ../../manuscript/99-installation.md:48
msgid "{line-numbers=off} # pkg install tmux"
msgstr ""

#: ../../manuscript/99-installation.md:51
msgid "pkg_add(1)"
msgstr ""

#: ../../manuscript/99-installation.md:53
msgid "{line-numbers=off} # pkg_add -r tmux"
msgstr ""

#: ../../manuscript/99-installation.md:56
msgid "OpenBSD"
msgstr ""

#: ../../manuscript/99-installation.md:58
msgid "As of OpenBSD 4.6, tmux is part of the base system."
msgstr ""

#: ../../manuscript/99-installation.md:60
msgid "If you are using an earlier version:"
msgstr ""

#: ../../manuscript/99-installation.md:62
msgid "{line-numbers=off} # pkg_add tmux"
msgstr ""

#: ../../manuscript/99-installation.md:65
msgid "NetBSD"
msgstr ""

#: ../../manuscript/99-installation.md:67
msgid "{language=shell, line-numbers=off} $ make -C /usr/pkgsrc/misc/tmux install"
msgstr ""

#: ../../manuscript/99-installation.md:70
msgid "Windows 10"
msgstr ""

#: ../../manuscript/99-installation.md:72
msgid "Check out the tmux on Windows 10 appendix section."
msgstr ""

#: ../../manuscript/99-troubleshooting.md:1
msgid "Appendix: Troubleshooting {#appendix-troubleshooting}"
msgstr ""

#: ../../manuscript/99-troubleshooting.md:3
msgid "E353: Nothing in register * when pasting on vim"
msgstr ""

#: ../../manuscript/99-troubleshooting.md:5
msgid ""
"If you are using macOS / OS X with vim inside tmux, you may get the error"
" E353: Nothing in register * when trying to paste."
msgstr ""

#: ../../manuscript/99-troubleshooting.md:8
msgid "Try installing reattach-to-user-namespace via brew."
msgstr ""

#: ../../manuscript/99-troubleshooting.md:11
msgid ""
"{language=shell, line-numbers=off} $ brew install reattach-to-user-"
"namespace"
msgstr ""

#: ../../manuscript/99-troubleshooting.md:14
msgid ""
"tmuxp: command not found and powerline: command not found {#troubleshoot-"
"site-paths}"
msgstr ""

#: ../../manuscript/99-troubleshooting.md:16
msgid ""
"This is due to your site package bin path (where application entry points"
" are installed) not being in your paths. To find your user site packages "
"base directory:"
msgstr ""

#: ../../manuscript/99-troubleshooting.md:19
msgid "{language=shell, line-numbers=off} $ python -m site --user-base"
msgstr ""

#: ../../manuscript/99-troubleshooting.md:22
msgid ""
"This will get you something like /Users/me/Library/Python/2.7 on macOS "
"with Python 2.7 or /home/me/.local on Linux/BSD boxes."
msgstr ""

#: ../../manuscript/99-troubleshooting.md:25
msgid ""
"The applications are in the bin/ folder inside. So, concatenate the two "
"and apply them to your PATH. This can be done automatically on every "
"shell session by using one of these in your ~/.bashrc or ~/.zshrc:"
msgstr ""

#: ../../manuscript/99-troubleshooting.md:30
msgid ""
"{language=shell, line-numbers=off} export "
"PATH=/Users/me/Library/Python/2.7/bin:$PATH     # macOS w/ python 2.7 "
"export PATH=$HOME/.local/bin:$PATH                     # Linux/BSD export"
" PATH=\"python -m site --user-base/bin\":$PATH   # May work all-around"
msgstr ""

#: ../../manuscript/99-troubleshooting.md:35
msgid ""
"Then open a new terminal, or . ~/.zshrc / . ~/.bashrc in your current "
"one. Then you can run $ tmuxp -V, $ tmuxp load and $ powerline tmux right"
" commands."
msgstr ""

#: ../../manuscript/99-windows-bash.md:1
msgid "Appendix: tmux on Windows 10 {#appendix-windows-bash}"
msgstr ""

#: ../../manuscript/99-windows-bash.md:3
msgid ""
"As of Windows 10 build 14361, you can run tmux via the Linux Subsystem "
"feature."
msgstr ""

#: ../../manuscript/99-windows-bash.md:5
msgid ""
"Usage requires enabling Developer mode via the \"For Developers\" tab in "
"the \"Update & security\" settings."
msgstr ""

#: ../../manuscript/99-windows-bash.md:8
msgid ""
"After enabling, open \"Windows Features\". You can find it by searching "
"for \"Turn Windows features on or off\". Then check \"Windows Subsystem "
"for Linux (Beta)\"."
msgstr ""

#: ../../manuscript/99-windows-bash.md:11
msgid "You may be asked to restart."
msgstr ""

#: ../../manuscript/99-windows-bash.md:13
msgid "Then open Command Prompt as you normally would (Run cli.exe). Then type"
msgstr ""

#: ../../manuscript/99-windows-bash.md:17
msgid ""
"It will prompt you to agree to terms, create a user. In my build, tmux "
"was already installed! But if it's not, type sudo apt-get install tmux."
msgstr ""

#: ../../manuscript/99-windows-bash.md:40
msgid "This should allow you to run tmux within bash.exe."
msgstr ""

#: ../../manuscript/99-windows-bash.md:42
msgid ""
"This is a real ubuntu installation, so you can continue to install "
"packages via sudo apt-get install **packagename** and update packages via"
" sudo apt-get update && sudo apt-get upgrade."
msgstr ""

